{"ast":null,"code":"// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n  }\n\n  return t;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { DefaultHttpClient } from \"./DefaultHttpClient\";\nimport { LogLevel } from \"./ILogger\";\nimport { HttpTransportType, TransferFormat } from \"./ITransport\";\nimport { LongPollingTransport } from \"./LongPollingTransport\";\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\nimport { Arg, createLogger, getUserAgentHeader, Platform } from \"./Utils\";\nimport { WebSocketTransport } from \"./WebSocketTransport\";\nvar MAX_REDIRECTS = 100;\n/** @private */\n\nvar HttpConnection =\n/** @class */\nfunction () {\n  function HttpConnection(url, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.features = {};\n    this.negotiateVersion = 1;\n    Arg.isRequired(url, \"url\");\n    this.logger = createLogger(options.logger);\n    this.baseUrl = this.resolveUrl(url);\n    options = options || {};\n    options.logMessageContent = options.logMessageContent === undefined ? false : options.logMessageContent;\n\n    if (typeof options.withCredentials === \"boolean\" || options.withCredentials === undefined) {\n      options.withCredentials = options.withCredentials === undefined ? true : options.withCredentials;\n    } else {\n      throw new Error(\"withCredentials option was not a 'boolean' or 'undefined' value\");\n    }\n\n    var webSocketModule = null;\n    var eventSourceModule = null;\n\n    if (Platform.isNode && typeof require !== \"undefined\") {\n      // In order to ignore the dynamic require in webpack builds we need to do this magic\n      // @ts-ignore: TS doesn't know about these names\n      var requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\n      webSocketModule = requireFunc(\"ws\");\n      eventSourceModule = requireFunc(\"eventsource\");\n    }\n\n    if (!Platform.isNode && typeof WebSocket !== \"undefined\" && !options.WebSocket) {\n      options.WebSocket = WebSocket;\n    } else if (Platform.isNode && !options.WebSocket) {\n      if (webSocketModule) {\n        options.WebSocket = webSocketModule;\n      }\n    }\n\n    if (!Platform.isNode && typeof EventSource !== \"undefined\" && !options.EventSource) {\n      options.EventSource = EventSource;\n    } else if (Platform.isNode && !options.EventSource) {\n      if (typeof eventSourceModule !== \"undefined\") {\n        options.EventSource = eventSourceModule;\n      }\n    }\n\n    this.httpClient = options.httpClient || new DefaultHttpClient(this.logger);\n    this.connectionState = \"Disconnected\"\n    /* Disconnected */\n    ;\n    this.connectionStarted = false;\n    this.options = options;\n    this.onreceive = null;\n    this.onclose = null;\n  }\n\n  HttpConnection.prototype.start = function (transferFormat) {\n    return __awaiter(this, void 0, void 0, function () {\n      var message, message;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            transferFormat = transferFormat || TransferFormat.Binary;\n            Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\n            this.logger.log(LogLevel.Debug, \"Starting connection with transfer format '\" + TransferFormat[transferFormat] + \"'.\");\n\n            if (this.connectionState !== \"Disconnected\"\n            /* Disconnected */\n            ) {\n                return [2\n                /*return*/\n                , Promise.reject(new Error(\"Cannot start an HttpConnection that is not in the 'Disconnected' state.\"))];\n              }\n\n            this.connectionState = \"Connecting\"\n            /* Connecting */\n            ;\n            this.startInternalPromise = this.startInternal(transferFormat);\n            return [4\n            /*yield*/\n            , this.startInternalPromise];\n\n          case 1:\n            _a.sent();\n\n            if (!(this.connectionState === \"Disconnecting\"\n            /* Disconnecting */\n            )) return [3\n              /*break*/\n              , 3];\n            message = \"Failed to start the HttpConnection before stop() was called.\";\n            this.logger.log(LogLevel.Error, message); // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.\n\n            return [4\n            /*yield*/\n            , this.stopPromise];\n\n          case 2:\n            // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.\n            _a.sent();\n\n            return [2\n            /*return*/\n            , Promise.reject(new Error(message))];\n\n          case 3:\n            if (this.connectionState !== \"Connected\"\n            /* Connected */\n            ) {\n                message = \"HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!\";\n                this.logger.log(LogLevel.Error, message);\n                return [2\n                /*return*/\n                , Promise.reject(new Error(message))];\n              }\n\n            _a.label = 4;\n\n          case 4:\n            this.connectionStarted = true;\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  HttpConnection.prototype.send = function (data) {\n    if (this.connectionState !== \"Connected\"\n    /* Connected */\n    ) {\n        return Promise.reject(new Error(\"Cannot send data if the connection is not in the 'Connected' State.\"));\n      }\n\n    if (!this.sendQueue) {\n      this.sendQueue = new TransportSendQueue(this.transport);\n    } // Transport will not be null if state is connected\n\n\n    return this.sendQueue.send(data);\n  };\n\n  HttpConnection.prototype.stop = function (error) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.connectionState === \"Disconnected\"\n            /* Disconnected */\n            ) {\n                this.logger.log(LogLevel.Debug, \"Call to HttpConnection.stop(\" + error + \") ignored because the connection is already in the disconnected state.\");\n                return [2\n                /*return*/\n                , Promise.resolve()];\n              }\n\n            if (this.connectionState === \"Disconnecting\"\n            /* Disconnecting */\n            ) {\n                this.logger.log(LogLevel.Debug, \"Call to HttpConnection.stop(\" + error + \") ignored because the connection is already in the disconnecting state.\");\n                return [2\n                /*return*/\n                , this.stopPromise];\n              }\n\n            this.connectionState = \"Disconnecting\"\n            /* Disconnecting */\n            ;\n            this.stopPromise = new Promise(function (resolve) {\n              // Don't complete stop() until stopConnection() completes.\n              _this.stopPromiseResolver = resolve;\n            }); // stopInternal should never throw so just observe it.\n\n            return [4\n            /*yield*/\n            , this.stopInternal(error)];\n\n          case 1:\n            // stopInternal should never throw so just observe it.\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.stopPromise];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  HttpConnection.prototype.stopInternal = function (error) {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_1, e_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // Set error as soon as possible otherwise there is a race between\n            // the transport closing and providing an error and the error from a close message\n            // We would prefer the close message error.\n            this.stopError = error;\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.startInternalPromise];\n\n          case 2:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_1 = _a.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            if (!this.transport) return [3\n            /*break*/\n            , 9];\n            _a.label = 5;\n\n          case 5:\n            _a.trys.push([5, 7,, 8]);\n\n            return [4\n            /*yield*/\n            , this.transport.stop()];\n\n          case 6:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            e_2 = _a.sent();\n            this.logger.log(LogLevel.Error, \"HttpConnection.transport.stop() threw error '\" + e_2 + \"'.\");\n            this.stopConnection();\n            return [3\n            /*break*/\n            , 8];\n\n          case 8:\n            this.transport = undefined;\n            return [3\n            /*break*/\n            , 10];\n\n          case 9:\n            this.logger.log(LogLevel.Debug, \"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.\");\n            this.stopConnection();\n            _a.label = 10;\n\n          case 10:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  HttpConnection.prototype.startInternal = function (transferFormat) {\n    return __awaiter(this, void 0, void 0, function () {\n      var url, negotiateResponse, redirects, _loop_1, this_1, e_3;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            url = this.baseUrl;\n            this.accessTokenFactory = this.options.accessTokenFactory;\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 12,, 13]);\n\n            if (!this.options.skipNegotiation) return [3\n            /*break*/\n            , 5];\n            if (!(this.options.transport === HttpTransportType.WebSockets)) return [3\n            /*break*/\n            , 3]; // No need to add a connection ID in this case\n\n            this.transport = this.constructTransport(HttpTransportType.WebSockets); // We should just call connect directly in this case.\n            // No fallback or negotiate in this case.\n\n            return [4\n            /*yield*/\n            , this.startTransport(url, transferFormat)];\n\n          case 2:\n            // We should just call connect directly in this case.\n            // No fallback or negotiate in this case.\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            throw new Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\n\n          case 4:\n            return [3\n            /*break*/\n            , 11];\n\n          case 5:\n            negotiateResponse = null;\n            redirects = 0;\n\n            _loop_1 = function () {\n              var accessToken_1;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , this_1.getNegotiationResponse(url)];\n\n                  case 1:\n                    negotiateResponse = _a.sent(); // the user tries to stop the connection when it is being started\n\n                    if (this_1.connectionState === \"Disconnecting\"\n                    /* Disconnecting */\n                    || this_1.connectionState === \"Disconnected\"\n                    /* Disconnected */\n                    ) {\n                        throw new Error(\"The connection was stopped during negotiation.\");\n                      }\n\n                    if (negotiateResponse.error) {\n                      throw new Error(negotiateResponse.error);\n                    }\n\n                    if (negotiateResponse.ProtocolVersion) {\n                      throw new Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\n                    }\n\n                    if (negotiateResponse.url) {\n                      url = negotiateResponse.url;\n                    }\n\n                    if (negotiateResponse.accessToken) {\n                      accessToken_1 = negotiateResponse.accessToken;\n\n                      this_1.accessTokenFactory = function () {\n                        return accessToken_1;\n                      };\n                    }\n\n                    redirects++;\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            };\n\n            this_1 = this;\n            _a.label = 6;\n\n          case 6:\n            return [5\n            /*yield**/\n            , _loop_1()];\n\n          case 7:\n            _a.sent();\n\n            _a.label = 8;\n\n          case 8:\n            if (negotiateResponse.url && redirects < MAX_REDIRECTS) return [3\n            /*break*/\n            , 6];\n            _a.label = 9;\n\n          case 9:\n            if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\n              throw new Error(\"Negotiate redirection limit exceeded.\");\n            }\n\n            return [4\n            /*yield*/\n            , this.createTransport(url, this.options.transport, negotiateResponse, transferFormat)];\n\n          case 10:\n            _a.sent();\n\n            _a.label = 11;\n\n          case 11:\n            if (this.transport instanceof LongPollingTransport) {\n              this.features.inherentKeepAlive = true;\n            }\n\n            if (this.connectionState === \"Connecting\"\n            /* Connecting */\n            ) {\n                // Ensure the connection transitions to the connected state prior to completing this.startInternalPromise.\n                // start() will handle the case when stop was called and startInternal exits still in the disconnecting state.\n                this.logger.log(LogLevel.Debug, \"The HttpConnection connected successfully.\");\n                this.connectionState = \"Connected\"\n                /* Connected */\n                ;\n              }\n\n            return [3\n            /*break*/\n            , 13];\n\n          case 12:\n            e_3 = _a.sent();\n            this.logger.log(LogLevel.Error, \"Failed to start the connection: \" + e_3);\n            this.connectionState = \"Disconnected\"\n            /* Disconnected */\n            ;\n            this.transport = undefined;\n            return [2\n            /*return*/\n            , Promise.reject(e_3)];\n\n          case 13:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  HttpConnection.prototype.getNegotiationResponse = function (url) {\n    return __awaiter(this, void 0, void 0, function () {\n      var headers, token, _a, name, value, negotiateUrl, response, negotiateResponse, e_4;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            headers = {};\n            if (!this.accessTokenFactory) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.accessTokenFactory()];\n\n          case 1:\n            token = _b.sent();\n\n            if (token) {\n              headers[\"Authorization\"] = \"Bearer \" + token;\n            }\n\n            _b.label = 2;\n\n          case 2:\n            _a = getUserAgentHeader(), name = _a[0], value = _a[1];\n            headers[name] = value;\n            negotiateUrl = this.resolveNegotiateUrl(url);\n            this.logger.log(LogLevel.Debug, \"Sending negotiation request: \" + negotiateUrl + \".\");\n            _b.label = 3;\n\n          case 3:\n            _b.trys.push([3, 5,, 6]);\n\n            return [4\n            /*yield*/\n            , this.httpClient.post(negotiateUrl, {\n              content: \"\",\n              headers: __assign({}, headers, this.options.headers),\n              withCredentials: this.options.withCredentials\n            })];\n\n          case 4:\n            response = _b.sent();\n\n            if (response.statusCode !== 200) {\n              return [2\n              /*return*/\n              , Promise.reject(new Error(\"Unexpected status code returned from negotiate '\" + response.statusCode + \"'\"))];\n            }\n\n            negotiateResponse = JSON.parse(response.content);\n\n            if (!negotiateResponse.negotiateVersion || negotiateResponse.negotiateVersion < 1) {\n              // Negotiate version 0 doesn't use connectionToken\n              // So we set it equal to connectionId so all our logic can use connectionToken without being aware of the negotiate version\n              negotiateResponse.connectionToken = negotiateResponse.connectionId;\n            }\n\n            return [2\n            /*return*/\n            , negotiateResponse];\n\n          case 5:\n            e_4 = _b.sent();\n            this.logger.log(LogLevel.Error, \"Failed to complete negotiation with the server: \" + e_4);\n            return [2\n            /*return*/\n            , Promise.reject(e_4)];\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  HttpConnection.prototype.createConnectUrl = function (url, connectionToken) {\n    if (!connectionToken) {\n      return url;\n    }\n\n    return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + (\"id=\" + connectionToken);\n  };\n\n  HttpConnection.prototype.createTransport = function (url, requestedTransport, negotiateResponse, requestedTransferFormat) {\n    return __awaiter(this, void 0, void 0, function () {\n      var connectUrl, transportExceptions, transports, negotiate, _i, transports_1, endpoint, transportOrError, ex_1, ex_2, message;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            connectUrl = this.createConnectUrl(url, negotiateResponse.connectionToken);\n            if (!this.isITransport(requestedTransport)) return [3\n            /*break*/\n            , 2];\n            this.logger.log(LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\n            this.transport = requestedTransport;\n            return [4\n            /*yield*/\n            , this.startTransport(connectUrl, requestedTransferFormat)];\n\n          case 1:\n            _a.sent();\n\n            this.connectionId = negotiateResponse.connectionId;\n            return [2\n            /*return*/\n            ];\n\n          case 2:\n            transportExceptions = [];\n            transports = negotiateResponse.availableTransports || [];\n            negotiate = negotiateResponse;\n            _i = 0, transports_1 = transports;\n            _a.label = 3;\n\n          case 3:\n            if (!(_i < transports_1.length)) return [3\n            /*break*/\n            , 13];\n            endpoint = transports_1[_i];\n            transportOrError = this.resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat);\n            if (!(transportOrError instanceof Error)) return [3\n            /*break*/\n            , 4]; // Store the error and continue, we don't want to cause a re-negotiate in these cases\n\n            transportExceptions.push(endpoint.transport + \" failed: \" + transportOrError);\n            return [3\n            /*break*/\n            , 12];\n\n          case 4:\n            if (!this.isITransport(transportOrError)) return [3\n            /*break*/\n            , 12];\n            this.transport = transportOrError;\n            if (!!negotiate) return [3\n            /*break*/\n            , 9];\n            _a.label = 5;\n\n          case 5:\n            _a.trys.push([5, 7,, 8]);\n\n            return [4\n            /*yield*/\n            , this.getNegotiationResponse(url)];\n\n          case 6:\n            negotiate = _a.sent();\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            ex_1 = _a.sent();\n            return [2\n            /*return*/\n            , Promise.reject(ex_1)];\n\n          case 8:\n            connectUrl = this.createConnectUrl(url, negotiate.connectionToken);\n            _a.label = 9;\n\n          case 9:\n            _a.trys.push([9, 11,, 12]);\n\n            return [4\n            /*yield*/\n            , this.startTransport(connectUrl, requestedTransferFormat)];\n\n          case 10:\n            _a.sent();\n\n            this.connectionId = negotiate.connectionId;\n            return [2\n            /*return*/\n            ];\n\n          case 11:\n            ex_2 = _a.sent();\n            this.logger.log(LogLevel.Error, \"Failed to start the transport '\" + endpoint.transport + \"': \" + ex_2);\n            negotiate = undefined;\n            transportExceptions.push(endpoint.transport + \" failed: \" + ex_2);\n\n            if (this.connectionState !== \"Connecting\"\n            /* Connecting */\n            ) {\n                message = \"Failed to select transport before stop() was called.\";\n                this.logger.log(LogLevel.Debug, message);\n                return [2\n                /*return*/\n                , Promise.reject(new Error(message))];\n              }\n\n            return [3\n            /*break*/\n            , 12];\n\n          case 12:\n            _i++;\n            return [3\n            /*break*/\n            , 3];\n\n          case 13:\n            if (transportExceptions.length > 0) {\n              return [2\n              /*return*/\n              , Promise.reject(new Error(\"Unable to connect to the server with any of the available transports. \" + transportExceptions.join(\" \")))];\n            }\n\n            return [2\n            /*return*/\n            , Promise.reject(new Error(\"None of the transports supported by the client are supported by the server.\"))];\n        }\n      });\n    });\n  };\n\n  HttpConnection.prototype.constructTransport = function (transport) {\n    switch (transport) {\n      case HttpTransportType.WebSockets:\n        if (!this.options.WebSocket) {\n          throw new Error(\"'WebSocket' is not supported in your environment.\");\n        }\n\n        return new WebSocketTransport(this.httpClient, this.accessTokenFactory, this.logger, this.options.logMessageContent || false, this.options.WebSocket, this.options.headers || {});\n\n      case HttpTransportType.ServerSentEvents:\n        if (!this.options.EventSource) {\n          throw new Error(\"'EventSource' is not supported in your environment.\");\n        }\n\n        return new ServerSentEventsTransport(this.httpClient, this.accessTokenFactory, this.logger, this.options.logMessageContent || false, this.options.EventSource, this.options.withCredentials, this.options.headers || {});\n\n      case HttpTransportType.LongPolling:\n        return new LongPollingTransport(this.httpClient, this.accessTokenFactory, this.logger, this.options.logMessageContent || false, this.options.withCredentials, this.options.headers || {});\n\n      default:\n        throw new Error(\"Unknown transport: \" + transport + \".\");\n    }\n  };\n\n  HttpConnection.prototype.startTransport = function (url, transferFormat) {\n    var _this = this;\n\n    this.transport.onreceive = this.onreceive;\n\n    this.transport.onclose = function (e) {\n      return _this.stopConnection(e);\n    };\n\n    return this.transport.connect(url, transferFormat);\n  };\n\n  HttpConnection.prototype.resolveTransportOrError = function (endpoint, requestedTransport, requestedTransferFormat) {\n    var transport = HttpTransportType[endpoint.transport];\n\n    if (transport === null || transport === undefined) {\n      this.logger.log(LogLevel.Debug, \"Skipping transport '\" + endpoint.transport + \"' because it is not supported by this client.\");\n      return new Error(\"Skipping transport '\" + endpoint.transport + \"' because it is not supported by this client.\");\n    } else {\n      if (transportMatches(requestedTransport, transport)) {\n        var transferFormats = endpoint.transferFormats.map(function (s) {\n          return TransferFormat[s];\n        });\n\n        if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\n          if (transport === HttpTransportType.WebSockets && !this.options.WebSocket || transport === HttpTransportType.ServerSentEvents && !this.options.EventSource) {\n            this.logger.log(LogLevel.Debug, \"Skipping transport '\" + HttpTransportType[transport] + \"' because it is not supported in your environment.'\");\n            return new Error(\"'\" + HttpTransportType[transport] + \"' is not supported in your environment.\");\n          } else {\n            this.logger.log(LogLevel.Debug, \"Selecting transport '\" + HttpTransportType[transport] + \"'.\");\n\n            try {\n              return this.constructTransport(transport);\n            } catch (ex) {\n              return ex;\n            }\n          }\n        } else {\n          this.logger.log(LogLevel.Debug, \"Skipping transport '\" + HttpTransportType[transport] + \"' because it does not support the requested transfer format '\" + TransferFormat[requestedTransferFormat] + \"'.\");\n          return new Error(\"'\" + HttpTransportType[transport] + \"' does not support \" + TransferFormat[requestedTransferFormat] + \".\");\n        }\n      } else {\n        this.logger.log(LogLevel.Debug, \"Skipping transport '\" + HttpTransportType[transport] + \"' because it was disabled by the client.\");\n        return new Error(\"'\" + HttpTransportType[transport] + \"' is disabled by the client.\");\n      }\n    }\n  };\n\n  HttpConnection.prototype.isITransport = function (transport) {\n    return transport && typeof transport === \"object\" && \"connect\" in transport;\n  };\n\n  HttpConnection.prototype.stopConnection = function (error) {\n    var _this = this;\n\n    this.logger.log(LogLevel.Debug, \"HttpConnection.stopConnection(\" + error + \") called while in state \" + this.connectionState + \".\");\n    this.transport = undefined; // If we have a stopError, it takes precedence over the error from the transport\n\n    error = this.stopError || error;\n    this.stopError = undefined;\n\n    if (this.connectionState === \"Disconnected\"\n    /* Disconnected */\n    ) {\n        this.logger.log(LogLevel.Debug, \"Call to HttpConnection.stopConnection(\" + error + \") was ignored because the connection is already in the disconnected state.\");\n        return;\n      }\n\n    if (this.connectionState === \"Connecting\"\n    /* Connecting */\n    ) {\n        this.logger.log(LogLevel.Warning, \"Call to HttpConnection.stopConnection(\" + error + \") was ignored because the connection is still in the connecting state.\");\n        throw new Error(\"HttpConnection.stopConnection(\" + error + \") was called while the connection is still in the connecting state.\");\n      }\n\n    if (this.connectionState === \"Disconnecting\"\n    /* Disconnecting */\n    ) {\n        // A call to stop() induced this call to stopConnection and needs to be completed.\n        // Any stop() awaiters will be scheduled to continue after the onclose callback fires.\n        this.stopPromiseResolver();\n      }\n\n    if (error) {\n      this.logger.log(LogLevel.Error, \"Connection disconnected with error '\" + error + \"'.\");\n    } else {\n      this.logger.log(LogLevel.Information, \"Connection disconnected.\");\n    }\n\n    if (this.sendQueue) {\n      this.sendQueue.stop().catch(function (e) {\n        _this.logger.log(LogLevel.Error, \"TransportSendQueue.stop() threw error '\" + e + \"'.\");\n      });\n      this.sendQueue = undefined;\n    }\n\n    this.connectionId = undefined;\n    this.connectionState = \"Disconnected\"\n    /* Disconnected */\n    ;\n\n    if (this.connectionStarted) {\n      this.connectionStarted = false;\n\n      try {\n        if (this.onclose) {\n          this.onclose(error);\n        }\n      } catch (e) {\n        this.logger.log(LogLevel.Error, \"HttpConnection.onclose(\" + error + \") threw error '\" + e + \"'.\");\n      }\n    }\n  };\n\n  HttpConnection.prototype.resolveUrl = function (url) {\n    // startsWith is not supported in IE\n    if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\n      return url;\n    }\n\n    if (!Platform.isBrowser || !window.document) {\n      throw new Error(\"Cannot resolve '\" + url + \"'.\");\n    } // Setting the url to the href propery of an anchor tag handles normalization\n    // for us. There are 3 main cases.\n    // 1. Relative path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\n    // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\n    // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\n\n\n    var aTag = window.document.createElement(\"a\");\n    aTag.href = url;\n    this.logger.log(LogLevel.Information, \"Normalizing '\" + url + \"' to '\" + aTag.href + \"'.\");\n    return aTag.href;\n  };\n\n  HttpConnection.prototype.resolveNegotiateUrl = function (url) {\n    var index = url.indexOf(\"?\");\n    var negotiateUrl = url.substring(0, index === -1 ? url.length : index);\n\n    if (negotiateUrl[negotiateUrl.length - 1] !== \"/\") {\n      negotiateUrl += \"/\";\n    }\n\n    negotiateUrl += \"negotiate\";\n    negotiateUrl += index === -1 ? \"\" : url.substring(index);\n\n    if (negotiateUrl.indexOf(\"negotiateVersion\") === -1) {\n      negotiateUrl += index === -1 ? \"?\" : \"&\";\n      negotiateUrl += \"negotiateVersion=\" + this.negotiateVersion;\n    }\n\n    return negotiateUrl;\n  };\n\n  return HttpConnection;\n}();\n\nexport { HttpConnection };\n\nfunction transportMatches(requestedTransport, actualTransport) {\n  return !requestedTransport || (actualTransport & requestedTransport) !== 0;\n}\n/** @private */\n\n\nvar TransportSendQueue =\n/** @class */\nfunction () {\n  function TransportSendQueue(transport) {\n    this.transport = transport;\n    this.buffer = [];\n    this.executing = true;\n    this.sendBufferedData = new PromiseSource();\n    this.transportResult = new PromiseSource();\n    this.sendLoopPromise = this.sendLoop();\n  }\n\n  TransportSendQueue.prototype.send = function (data) {\n    this.bufferData(data);\n\n    if (!this.transportResult) {\n      this.transportResult = new PromiseSource();\n    }\n\n    return this.transportResult.promise;\n  };\n\n  TransportSendQueue.prototype.stop = function () {\n    this.executing = false;\n    this.sendBufferedData.resolve();\n    return this.sendLoopPromise;\n  };\n\n  TransportSendQueue.prototype.bufferData = function (data) {\n    if (this.buffer.length && typeof this.buffer[0] !== typeof data) {\n      throw new Error(\"Expected data to be of type \" + typeof this.buffer + \" but was of type \" + typeof data);\n    }\n\n    this.buffer.push(data);\n    this.sendBufferedData.resolve();\n  };\n\n  TransportSendQueue.prototype.sendLoop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var transportResult, data, error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!true) return [3\n            /*break*/\n            , 6];\n            return [4\n            /*yield*/\n            , this.sendBufferedData.promise];\n\n          case 1:\n            _a.sent();\n\n            if (!this.executing) {\n              if (this.transportResult) {\n                this.transportResult.reject(\"Connection stopped.\");\n              }\n\n              return [3\n              /*break*/\n              , 6];\n            }\n\n            this.sendBufferedData = new PromiseSource();\n            transportResult = this.transportResult;\n            this.transportResult = undefined;\n            data = typeof this.buffer[0] === \"string\" ? this.buffer.join(\"\") : TransportSendQueue.concatBuffers(this.buffer);\n            this.buffer.length = 0;\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this.transport.send(data)];\n\n          case 3:\n            _a.sent();\n\n            transportResult.resolve();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_1 = _a.sent();\n            transportResult.reject(error_1);\n            return [3\n            /*break*/\n            , 5];\n\n          case 5:\n            return [3\n            /*break*/\n            , 0];\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  TransportSendQueue.concatBuffers = function (arrayBuffers) {\n    var totalLength = arrayBuffers.map(function (b) {\n      return b.byteLength;\n    }).reduce(function (a, b) {\n      return a + b;\n    });\n    var result = new Uint8Array(totalLength);\n    var offset = 0;\n\n    for (var _i = 0, arrayBuffers_1 = arrayBuffers; _i < arrayBuffers_1.length; _i++) {\n      var item = arrayBuffers_1[_i];\n      result.set(new Uint8Array(item), offset);\n      offset += item.byteLength;\n    }\n\n    return result.buffer;\n  };\n\n  return TransportSendQueue;\n}();\n\nexport { TransportSendQueue };\n\nvar PromiseSource =\n/** @class */\nfunction () {\n  function PromiseSource() {\n    var _this = this;\n\n    this.promise = new Promise(function (resolve, reject) {\n      var _a;\n\n      return _a = [resolve, reject], _this.resolver = _a[0], _this.rejecter = _a[1], _a;\n    });\n  }\n\n  PromiseSource.prototype.resolve = function () {\n    this.resolver();\n  };\n\n  PromiseSource.prototype.reject = function (reason) {\n    this.rejecter(reason);\n  };\n\n  return PromiseSource;\n}();","map":{"version":3,"sources":["../../src/HttpConnection.ts"],"names":[],"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAAS,iBAAT,QAAkC,qBAAlC;AAIA,SAAkB,QAAlB,QAAkC,WAAlC;AACA,SAAS,iBAAT,EAAwC,cAAxC,QAA8D,cAA9D;AACA,SAAS,oBAAT,QAAqC,wBAArC;AACA,SAAS,yBAAT,QAA0C,6BAA1C;AACA,SAAS,GAAT,EAAc,YAAd,EAA4B,kBAA5B,EAAgD,QAAhD,QAAgE,SAAhE;AACA,SAAS,kBAAT,QAAmC,sBAAnC;AA2BA,IAAM,aAAa,GAAG,GAAtB;AAEA;;AACA,IAAA,cAAA;AAAA;AAAA,YAAA;AAwBI,WAAA,cAAA,CAAY,GAAZ,EAAyB,OAAzB,EAA6D;AAApC,QAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,OAAA,GAAA,EAAA;AAAoC;;AAR7C,SAAA,QAAA,GAAgB,EAAhB;AAMC,SAAA,gBAAA,GAA2B,CAA3B;AAGb,IAAA,GAAG,CAAC,UAAJ,CAAe,GAAf,EAAoB,KAApB;AAEA,SAAK,MAAL,GAAc,YAAY,CAAC,OAAO,CAAC,MAAT,CAA1B;AACA,SAAK,OAAL,GAAe,KAAK,UAAL,CAAgB,GAAhB,CAAf;AAEA,IAAA,OAAO,GAAG,OAAO,IAAI,EAArB;AACA,IAAA,OAAO,CAAC,iBAAR,GAA4B,OAAO,CAAC,iBAAR,KAA8B,SAA9B,GAA0C,KAA1C,GAAkD,OAAO,CAAC,iBAAtF;;AACA,QAAI,OAAO,OAAO,CAAC,eAAf,KAAmC,SAAnC,IAAgD,OAAO,CAAC,eAAR,KAA4B,SAAhF,EAA2F;AACvF,MAAA,OAAO,CAAC,eAAR,GAA0B,OAAO,CAAC,eAAR,KAA4B,SAA5B,GAAwC,IAAxC,GAA+C,OAAO,CAAC,eAAjF;AACH,KAFD,MAEO;AACH,YAAM,IAAI,KAAJ,CAAU,iEAAV,CAAN;AACH;;AAED,QAAI,eAAe,GAAQ,IAA3B;AACA,QAAI,iBAAiB,GAAQ,IAA7B;;AAEA,QAAI,QAAQ,CAAC,MAAT,IAAmB,OAAO,OAAP,KAAmB,WAA1C,EAAuD;AACnD;AACA;AACA,UAAM,WAAW,GAAG,OAAO,mBAAP,KAA+B,UAA/B,GAA4C,uBAA5C,GAAsE,OAA1F;AACA,MAAA,eAAe,GAAG,WAAW,CAAC,IAAD,CAA7B;AACA,MAAA,iBAAiB,GAAG,WAAW,CAAC,aAAD,CAA/B;AACH;;AAED,QAAI,CAAC,QAAQ,CAAC,MAAV,IAAoB,OAAO,SAAP,KAAqB,WAAzC,IAAwD,CAAC,OAAO,CAAC,SAArE,EAAgF;AAC5E,MAAA,OAAO,CAAC,SAAR,GAAoB,SAApB;AACH,KAFD,MAEO,IAAI,QAAQ,CAAC,MAAT,IAAmB,CAAC,OAAO,CAAC,SAAhC,EAA2C;AAC9C,UAAI,eAAJ,EAAqB;AACjB,QAAA,OAAO,CAAC,SAAR,GAAoB,eAApB;AACH;AACJ;;AAED,QAAI,CAAC,QAAQ,CAAC,MAAV,IAAoB,OAAO,WAAP,KAAuB,WAA3C,IAA0D,CAAC,OAAO,CAAC,WAAvE,EAAoF;AAChF,MAAA,OAAO,CAAC,WAAR,GAAsB,WAAtB;AACH,KAFD,MAEO,IAAI,QAAQ,CAAC,MAAT,IAAmB,CAAC,OAAO,CAAC,WAAhC,EAA6C;AAChD,UAAI,OAAO,iBAAP,KAA6B,WAAjC,EAA8C;AAC1C,QAAA,OAAO,CAAC,WAAR,GAAsB,iBAAtB;AACH;AACJ;;AAED,SAAK,UAAL,GAAkB,OAAO,CAAC,UAAR,IAAsB,IAAI,iBAAJ,CAAsB,KAAK,MAA3B,CAAxC;AACA,SAAK,eAAL,GAAoB;AAAA;AAApB;AACA,SAAK,iBAAL,GAAyB,KAAzB;AACA,SAAK,OAAL,GAAe,OAAf;AAEA,SAAK,SAAL,GAAiB,IAAjB;AACA,SAAK,OAAL,GAAe,IAAf;AACH;;AAIY,EAAA,cAAA,CAAA,SAAA,CAAA,KAAA,GAAb,UAAmB,cAAnB,EAAkD;;;;;;AAC9C,YAAA,cAAc,GAAG,cAAc,IAAI,cAAc,CAAC,MAAlD;AAEA,YAAA,GAAG,CAAC,IAAJ,CAAS,cAAT,EAAyB,cAAzB,EAAyC,gBAAzC;AAEA,iBAAK,MAAL,CAAY,GAAZ,CAAgB,QAAQ,CAAC,KAAzB,EAAgC,+CAA6C,cAAc,CAAC,cAAD,CAA3D,GAA2E,IAA3G;;AAEA,gBAAI,KAAK,eAAL,KAAoB;AAAA;AAAxB,cAA2D;AACvD,uBAAA,CAAA;AAAA;AAAA,kBAAO,OAAO,CAAC,MAAR,CAAe,IAAI,KAAJ,CAAU,yEAAV,CAAf,CAAP,CAAA;AACH;;AAED,iBAAK,eAAL,GAAoB;AAAA;AAApB;AAEA,iBAAK,oBAAL,GAA4B,KAAK,aAAL,CAAmB,cAAnB,CAA5B;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,oBAAX,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;gBAGI,EAAA,KAAK,eAAL,KAA2B;AAAA;AAA3B,a,EAAA,OAAA,CAAA;AAAA;AAAA,gBAAA,CAAA,CAAA;AAEM,YAAA,OAAO,GAAG,8DAAV;AACN,iBAAK,MAAL,CAAY,GAAZ,CAAgB,QAAQ,CAAC,KAAzB,EAAgC,OAAhC,E,CAEA;;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,WAAX,CAAA;;;AADA;AACA,YAAA,EAAA,CAAA,IAAA;;AAEA,mBAAA,CAAA;AAAA;AAAA,cAAO,OAAO,CAAC,MAAR,CAAe,IAAI,KAAJ,CAAU,OAAV,CAAf,CAAP,CAAA;;;AACG,gBAAI,KAAK,eAAL,KAA2B;AAAA;AAA/B,cAA+D;AAE5D,gBAAA,OAAO,GAAG,6GAAV;AACN,qBAAK,MAAL,CAAY,GAAZ,CAAgB,QAAQ,CAAC,KAAzB,EAAgC,OAAhC;AACA,uBAAA,CAAA;AAAA;AAAA,kBAAO,OAAO,CAAC,MAAR,CAAe,IAAI,KAAJ,CAAU,OAAV,CAAf,CAAP,CAAA;AACH;;;;;AAED,iBAAK,iBAAL,GAAyB,IAAzB;;;;;;;AACH,GAlCY;;AAoCN,EAAA,cAAA,CAAA,SAAA,CAAA,IAAA,GAAP,UAAY,IAAZ,EAAsC;AAClC,QAAI,KAAK,eAAL,KAAoB;AAAA;AAAxB,MAAwD;AACpD,eAAO,OAAO,CAAC,MAAR,CAAe,IAAI,KAAJ,CAAU,qEAAV,CAAf,CAAP;AACH;;AAED,QAAI,CAAC,KAAK,SAAV,EAAqB;AACjB,WAAK,SAAL,GAAiB,IAAI,kBAAJ,CAAuB,KAAK,SAA5B,CAAjB;AACH,KAPiC,CASlC;;;AACA,WAAO,KAAK,SAAL,CAAe,IAAf,CAAoB,IAApB,CAAP;AACH,GAXM;;AAaM,EAAA,cAAA,CAAA,SAAA,CAAA,IAAA,GAAb,UAAkB,KAAlB,EAA+B;;;;;;;AAC3B,gBAAI,KAAK,eAAL,KAAoB;AAAA;AAAxB,cAA2D;AACvD,qBAAK,MAAL,CAAY,GAAZ,CAAgB,QAAQ,CAAC,KAAzB,EAAgC,iCAA+B,KAA/B,GAAoC,wEAApE;AACA,uBAAA,CAAA;AAAA;AAAA,kBAAO,OAAO,CAAC,OAAR,EAAP,CAAA;AACH;;AAED,gBAAI,KAAK,eAAL,KAAoB;AAAA;AAAxB,cAA4D;AACxD,qBAAK,MAAL,CAAY,GAAZ,CAAgB,QAAQ,CAAC,KAAzB,EAAgC,iCAA+B,KAA/B,GAAoC,yEAApE;AACA,uBAAA,CAAA;AAAA;AAAA,kBAAO,KAAK,WAAZ,CAAA;AACH;;AAED,iBAAK,eAAL,GAAoB;AAAA;AAApB;AAEA,iBAAK,WAAL,GAAmB,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAQ;AACnC;AACA,cAAA,KAAI,CAAC,mBAAL,GAA2B,OAA3B;AACH,aAHkB,CAAnB,C,CAKA;;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,YAAL,CAAkB,KAAlB,CAAN,CAAA;;;AADA;AACA,YAAA,EAAA,CAAA,IAAA;;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,WAAX,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;;;;AACH,GArBY;;AAuBC,EAAA,cAAA,CAAA,SAAA,CAAA,YAAA,GAAd,UAA2B,KAA3B,EAAwC;;;;;;AACpC;AACA;AACA;AACA,iBAAK,SAAL,GAAiB,KAAjB;;;;;;AAGI,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,oBAAX,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;;;;;;;;;iBAQA,KAAK,S,EAAL,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;;;;;;AAEI,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,SAAL,CAAe,IAAf,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;;;;AAEA,iBAAK,MAAL,CAAY,GAAZ,CAAgB,QAAQ,CAAC,KAAzB,EAAgC,kDAAgD,GAAhD,GAAiD,IAAjF;AACA,iBAAK,cAAL;;;;;;AAGJ,iBAAK,SAAL,GAAiB,SAAjB;;;;;;AAEA,iBAAK,MAAL,CAAY,GAAZ,CAAgB,QAAQ,CAAC,KAAzB,EAAgC,wFAAhC;AACA,iBAAK,cAAL;;;;;;;;;;AAEP,GA5Ba;;AA8BA,EAAA,cAAA,CAAA,SAAA,CAAA,aAAA,GAAd,UAA4B,cAA5B,EAA0D;;;;;;;AAGlD,YAAA,GAAG,GAAG,KAAK,OAAX;AACJ,iBAAK,kBAAL,GAA0B,KAAK,OAAL,CAAa,kBAAvC;;;;;;iBAGQ,KAAK,OAAL,CAAa,e,EAAb,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;gBACI,EAAA,KAAK,OAAL,CAAa,SAAb,KAA2B,iBAAiB,CAAC,UAA7C,C,EAAA,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA,C,CACA;;AACA,iBAAK,SAAL,GAAiB,KAAK,kBAAL,CAAwB,iBAAiB,CAAC,UAA1C,CAAjB,C,CACA;AACA;;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,cAAL,CAAoB,GAApB,EAAyB,cAAzB,CAAN,CAAA;;;AAFA;AACA;AACA,YAAA,EAAA,CAAA,IAAA;;;;;;;AAEA,kBAAM,IAAI,KAAJ,CAAU,8EAAV,CAAN;;;;;;;;AAGA,YAAA,iBAAiB,GAA8B,IAA/C;AACA,YAAA,SAAS,GAAG,CAAZ;;;;;;;AAGoB,2BAAA,CAAA;AAAA;AAAA,sBAAM,MAAA,CAAK,sBAAL,CAA4B,GAA5B,CAAN,CAAA;;;AAApB,oBAAA,iBAAiB,GAAG,EAAA,CAAA,IAAA,EAApB,C,CACA;;AACA,wBAAI,MAAA,CAAK,eAAL,KAAoB;AAAA;AAApB,uBAA0D,MAAA,CAAK,eAAL,KAAoB;AAAA;AAAlF,sBAAqH;AACjH,8BAAM,IAAI,KAAJ,CAAU,gDAAV,CAAN;AACH;;AAED,wBAAI,iBAAiB,CAAC,KAAtB,EAA6B;AACzB,4BAAM,IAAI,KAAJ,CAAU,iBAAiB,CAAC,KAA5B,CAAN;AACH;;AAED,wBAAK,iBAAyB,CAAC,eAA/B,EAAgD;AAC5C,4BAAM,IAAI,KAAJ,CAAU,8LAAV,CAAN;AACH;;AAED,wBAAI,iBAAiB,CAAC,GAAtB,EAA2B;AACvB,sBAAA,GAAG,GAAG,iBAAiB,CAAC,GAAxB;AACH;;AAED,wBAAI,iBAAiB,CAAC,WAAtB,EAAmC;AAGzB,sBAAA,aAAA,GAAc,iBAAiB,CAAC,WAAhC;;AACN,sBAAA,MAAA,CAAK,kBAAL,GAA0B,YAAA;AAAM,+BAAA,aAAA;AAAW,uBAA3C;AACH;;AAED,oBAAA,SAAS;;;;;;;;;;;;;;;;;;;;;;gBAEN,iBAAiB,CAAC,GAAlB,IAAyB,SAAS,GAAG,a,EAAa,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;;;;AAEzD,gBAAI,SAAS,KAAK,aAAd,IAA+B,iBAAiB,CAAC,GAArD,EAA0D;AACtD,oBAAM,IAAI,KAAJ,CAAU,uCAAV,CAAN;AACH;;AAED,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,eAAL,CAAqB,GAArB,EAA0B,KAAK,OAAL,CAAa,SAAvC,EAAkD,iBAAlD,EAAqE,cAArE,CAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;AAGJ,gBAAI,KAAK,SAAL,YAA0B,oBAA9B,EAAoD;AAChD,mBAAK,QAAL,CAAc,iBAAd,GAAkC,IAAlC;AACH;;AAED,gBAAI,KAAK,eAAL,KAAoB;AAAA;AAAxB,cAAyD;AACrD;AACA;AACA,qBAAK,MAAL,CAAY,GAAZ,CAAgB,QAAQ,CAAC,KAAzB,EAAgC,4CAAhC;AACA,qBAAK,eAAL,GAAoB;AAAA;AAApB;AACH;;;;;;;;AAMD,iBAAK,MAAL,CAAY,GAAZ,CAAgB,QAAQ,CAAC,KAAzB,EAAgC,qCAAqC,GAArE;AACA,iBAAK,eAAL,GAAoB;AAAA;AAApB;AACA,iBAAK,SAAL,GAAiB,SAAjB;AACA,mBAAA,CAAA;AAAA;AAAA,cAAO,OAAO,CAAC,MAAR,CAAe,GAAf,CAAP,CAAA;;;;;;;;;AAEP,GA9Ea;;AAgFA,EAAA,cAAA,CAAA,SAAA,CAAA,sBAAA,GAAd,UAAqC,GAArC,EAAgD;;;;;;;AACtC,YAAA,OAAO,GAAG,EAAV;iBACF,KAAK,kB,EAAL,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACc,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,kBAAL,EAAN,CAAA;;;AAAR,YAAA,KAAK,GAAG,EAAA,CAAA,IAAA,EAAR;;AACN,gBAAI,KAAJ,EAAW;AACP,cAAA,OAAO,CAAC,eAAD,CAAP,GAA2B,YAAU,KAArC;AACH;;;;;AAGC,YAAA,EAAA,GAAgB,kBAAkB,EAAlC,EAAC,IAAI,GAAA,EAAA,CAAA,CAAA,CAAL,EAAO,KAAK,GAAA,EAAA,CAAA,CAAA,CAAZ;AACN,YAAA,OAAO,CAAC,IAAD,CAAP,GAAgB,KAAhB;AAEM,YAAA,YAAY,GAAG,KAAK,mBAAL,CAAyB,GAAzB,CAAf;AACN,iBAAK,MAAL,CAAY,GAAZ,CAAgB,QAAQ,CAAC,KAAzB,EAAgC,kCAAgC,YAAhC,GAA4C,GAA5E;;;;;;AAEqB,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,UAAL,CAAgB,IAAhB,CAAqB,YAArB,EAAmC;AACtD,cAAA,OAAO,EAAE,EAD6C;AAEtD,cAAA,OAAO,EAAA,QAAA,CAAA,EAAA,EAAO,OAAP,EAAmB,KAAK,OAAL,CAAa,OAAhC,CAF+C;AAGtD,cAAA,eAAe,EAAE,KAAK,OAAL,CAAa;AAHwB,aAAnC,CAAN,CAAA;;;AAAX,YAAA,QAAQ,GAAG,EAAA,CAAA,IAAA,EAAX;;AAMN,gBAAI,QAAQ,CAAC,UAAT,KAAwB,GAA5B,EAAiC;AAC7B,qBAAA,CAAA;AAAA;AAAA,gBAAO,OAAO,CAAC,MAAR,CAAe,IAAI,KAAJ,CAAU,qDAAmD,QAAQ,CAAC,UAA5D,GAAsE,GAAhF,CAAf,CAAP,CAAA;AACH;;AAEK,YAAA,iBAAiB,GAAG,IAAI,CAAC,KAAL,CAAW,QAAQ,CAAC,OAApB,CAApB;;AACN,gBAAI,CAAC,iBAAiB,CAAC,gBAAnB,IAAuC,iBAAiB,CAAC,gBAAlB,GAAqC,CAAhF,EAAmF;AAC/E;AACA;AACA,cAAA,iBAAiB,CAAC,eAAlB,GAAoC,iBAAiB,CAAC,YAAtD;AACH;;AACD,mBAAA,CAAA;AAAA;AAAA,cAAO,iBAAP,CAAA;;;;AAEA,iBAAK,MAAL,CAAY,GAAZ,CAAgB,QAAQ,CAAC,KAAzB,EAAgC,qDAAqD,GAArF;AACA,mBAAA,CAAA;AAAA;AAAA,cAAO,OAAO,CAAC,MAAR,CAAe,GAAf,CAAP,CAAA;;;;;;;;;AAEP,GApCa;;AAsCN,EAAA,cAAA,CAAA,SAAA,CAAA,gBAAA,GAAR,UAAyB,GAAzB,EAAsC,eAAtC,EAAgF;AAC5E,QAAI,CAAC,eAAL,EAAsB;AAClB,aAAO,GAAP;AACH;;AAED,WAAO,GAAG,IAAI,GAAG,CAAC,OAAJ,CAAY,GAAZ,MAAqB,CAAC,CAAtB,GAA0B,GAA1B,GAAgC,GAApC,CAAH,IAA8C,QAAM,eAApD,CAAP;AACH,GANO;;AAQM,EAAA,cAAA,CAAA,SAAA,CAAA,eAAA,GAAd,UAA8B,GAA9B,EAA2C,kBAA3C,EAA2G,iBAA3G,EAAkJ,uBAAlJ,EAAyL;;;;;;;AACjL,YAAA,UAAU,GAAG,KAAK,gBAAL,CAAsB,GAAtB,EAA2B,iBAAiB,CAAC,eAA7C,CAAb;iBACA,KAAK,YAAL,CAAkB,kBAAlB,C,EAAA,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACA,iBAAK,MAAL,CAAY,GAAZ,CAAgB,QAAQ,CAAC,KAAzB,EAAgC,yEAAhC;AACA,iBAAK,SAAL,GAAiB,kBAAjB;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,cAAL,CAAoB,UAApB,EAAgC,uBAAhC,CAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AAEA,iBAAK,YAAL,GAAoB,iBAAiB,CAAC,YAAtC;AACA,mBAAA,CAAA;AAAA;AAAA,aAAA;;;AAGE,YAAA,mBAAmB,GAAU,EAA7B;AACA,YAAA,UAAU,GAAG,iBAAiB,CAAC,mBAAlB,IAAyC,EAAtD;AACF,YAAA,SAAS,GAAmC,iBAA5C;iBAC6B,C,EAAV,YAAA,GAAA,U;;;;gBAAA,EAAA,EAAA,GAAA,YAAA,CAAA,MAAA,C,EAAU,OAAA,CAAA;AAAA;AAAA,cAAA,EAAA,CAAA;AAAtB,YAAA,QAAQ,GAAA,YAAA,CAAA,EAAA,CAAR;AACD,YAAA,gBAAgB,GAAG,KAAK,uBAAL,CAA6B,QAA7B,EAAuC,kBAAvC,EAA2D,uBAA3D,CAAnB;gBACF,EAAA,gBAAgB,YAAY,KAA5B,C,EAAA,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA,C,CACA;;AACA,YAAA,mBAAmB,CAAC,IAApB,CAA4B,QAAQ,CAAC,SAAT,GAAkB,WAAlB,GAA8B,gBAA1D;;;;;;iBACO,KAAK,YAAL,CAAkB,gBAAlB,C,EAAA,OAAA,CAAA;AAAA;AAAA,cAAA,EAAA,CAAA;AACP,iBAAK,SAAL,GAAiB,gBAAjB;iBACI,CAAC,S,EAAD,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;;;;;;AAEgB,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,sBAAL,CAA4B,GAA5B,CAAN,CAAA;;;AAAZ,YAAA,SAAS,GAAG,EAAA,CAAA,IAAA,EAAZ;;;;;;;AAEA,mBAAA,CAAA;AAAA;AAAA,cAAO,OAAO,CAAC,MAAR,CAAe,IAAf,CAAP,CAAA;;;AAEJ,YAAA,UAAU,GAAG,KAAK,gBAAL,CAAsB,GAAtB,EAA2B,SAAS,CAAC,eAArC,CAAb;;;;;;AAGA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,cAAL,CAAoB,UAApB,EAAgC,uBAAhC,CAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AACA,iBAAK,YAAL,GAAoB,SAAS,CAAC,YAA9B;AACA,mBAAA,CAAA;AAAA;AAAA,aAAA;;;;AAEA,iBAAK,MAAL,CAAY,GAAZ,CAAgB,QAAQ,CAAC,KAAzB,EAAgC,oCAAkC,QAAQ,CAAC,SAA3C,GAAoD,KAApD,GAA0D,IAA1F;AACA,YAAA,SAAS,GAAG,SAAZ;AACA,YAAA,mBAAmB,CAAC,IAApB,CAA4B,QAAQ,CAAC,SAAT,GAAkB,WAAlB,GAA8B,IAA1D;;AAEA,gBAAI,KAAK,eAAL,KAAoB;AAAA;AAAxB,cAAyD;AAC/C,gBAAA,OAAO,GAAG,sDAAV;AACN,qBAAK,MAAL,CAAY,GAAZ,CAAgB,QAAQ,CAAC,KAAzB,EAAgC,OAAhC;AACA,uBAAA,CAAA;AAAA;AAAA,kBAAO,OAAO,CAAC,MAAR,CAAe,IAAI,KAAJ,CAAU,OAAV,CAAf,CAAP,CAAA;AACH;;;;;;;AA5BU,YAAA,EAAA;;;;;;AAiCvB,gBAAI,mBAAmB,CAAC,MAApB,GAA6B,CAAjC,EAAoC;AAChC,qBAAA,CAAA;AAAA;AAAA,gBAAO,OAAO,CAAC,MAAR,CAAe,IAAI,KAAJ,CAAU,2EAAyE,mBAAmB,CAAC,IAApB,CAAyB,GAAzB,CAAnF,CAAf,CAAP,CAAA;AACH;;AACD,mBAAA,CAAA;AAAA;AAAA,cAAO,OAAO,CAAC,MAAR,CAAe,IAAI,KAAJ,CAAU,6EAAV,CAAf,CAAP,CAAA;;;;AACH,GAnDa;;AAqDN,EAAA,cAAA,CAAA,SAAA,CAAA,kBAAA,GAAR,UAA2B,SAA3B,EAAuD;AACnD,YAAQ,SAAR;AACI,WAAK,iBAAiB,CAAC,UAAvB;AACI,YAAI,CAAC,KAAK,OAAL,CAAa,SAAlB,EAA6B;AACzB,gBAAM,IAAI,KAAJ,CAAU,mDAAV,CAAN;AACH;;AACD,eAAO,IAAI,kBAAJ,CAAuB,KAAK,UAA5B,EAAwC,KAAK,kBAA7C,EAAiE,KAAK,MAAtE,EAA8E,KAAK,OAAL,CAAa,iBAAb,IAAkC,KAAhH,EAAuH,KAAK,OAAL,CAAa,SAApI,EAA+I,KAAK,OAAL,CAAa,OAAb,IAAwB,EAAvK,CAAP;;AACJ,WAAK,iBAAiB,CAAC,gBAAvB;AACI,YAAI,CAAC,KAAK,OAAL,CAAa,WAAlB,EAA+B;AAC3B,gBAAM,IAAI,KAAJ,CAAU,qDAAV,CAAN;AACH;;AACD,eAAO,IAAI,yBAAJ,CAA8B,KAAK,UAAnC,EAA+C,KAAK,kBAApD,EAAwE,KAAK,MAA7E,EAAqF,KAAK,OAAL,CAAa,iBAAb,IAAkC,KAAvH,EAA8H,KAAK,OAAL,CAAa,WAA3I,EAAwJ,KAAK,OAAL,CAAa,eAArK,EAAuL,KAAK,OAAL,CAAa,OAAb,IAAwB,EAA/M,CAAP;;AACJ,WAAK,iBAAiB,CAAC,WAAvB;AACI,eAAO,IAAI,oBAAJ,CAAyB,KAAK,UAA9B,EAA0C,KAAK,kBAA/C,EAAmE,KAAK,MAAxE,EAAgF,KAAK,OAAL,CAAa,iBAAb,IAAkC,KAAlH,EAAyH,KAAK,OAAL,CAAa,eAAtI,EAAwJ,KAAK,OAAL,CAAa,OAAb,IAAwB,EAAhL,CAAP;;AACJ;AACI,cAAM,IAAI,KAAJ,CAAU,wBAAsB,SAAtB,GAA+B,GAAzC,CAAN;AAdR;AAgBH,GAjBO;;AAmBA,EAAA,cAAA,CAAA,SAAA,CAAA,cAAA,GAAR,UAAuB,GAAvB,EAAoC,cAApC,EAAkE;AAAlE,QAAA,KAAA,GAAA,IAAA;;AACI,SAAK,SAAL,CAAgB,SAAhB,GAA4B,KAAK,SAAjC;;AACA,SAAK,SAAL,CAAgB,OAAhB,GAA0B,UAAC,CAAD,EAAE;AAAK,aAAA,KAAI,CAAC,cAAL,CAAA,CAAA,CAAA;AAAsB,KAAvD;;AACA,WAAO,KAAK,SAAL,CAAgB,OAAhB,CAAwB,GAAxB,EAA6B,cAA7B,CAAP;AACH,GAJO;;AAMA,EAAA,cAAA,CAAA,SAAA,CAAA,uBAAA,GAAR,UAAgC,QAAhC,EAA+D,kBAA/D,EAAkH,uBAAlH,EAAyJ;AACrJ,QAAM,SAAS,GAAG,iBAAiB,CAAC,QAAQ,CAAC,SAAV,CAAnC;;AACA,QAAI,SAAS,KAAK,IAAd,IAAsB,SAAS,KAAK,SAAxC,EAAmD;AAC/C,WAAK,MAAL,CAAY,GAAZ,CAAgB,QAAQ,CAAC,KAAzB,EAAgC,yBAAuB,QAAQ,CAAC,SAAhC,GAAyC,+CAAzE;AACA,aAAO,IAAI,KAAJ,CAAU,yBAAuB,QAAQ,CAAC,SAAhC,GAAyC,+CAAnD,CAAP;AACH,KAHD,MAGO;AACH,UAAI,gBAAgB,CAAC,kBAAD,EAAqB,SAArB,CAApB,EAAqD;AACjD,YAAM,eAAe,GAAG,QAAQ,CAAC,eAAT,CAAyB,GAAzB,CAA6B,UAAC,CAAD,EAAE;AAAK,iBAAA,cAAc,CAAd,CAAc,CAAd;AAAiB,SAArD,CAAxB;;AACA,YAAI,eAAe,CAAC,OAAhB,CAAwB,uBAAxB,KAAoD,CAAxD,EAA2D;AACvD,cAAK,SAAS,KAAK,iBAAiB,CAAC,UAAhC,IAA8C,CAAC,KAAK,OAAL,CAAa,SAA7D,IACC,SAAS,KAAK,iBAAiB,CAAC,gBAAhC,IAAoD,CAAC,KAAK,OAAL,CAAa,WADvE,EACqF;AACjF,iBAAK,MAAL,CAAY,GAAZ,CAAgB,QAAQ,CAAC,KAAzB,EAAgC,yBAAuB,iBAAiB,CAAC,SAAD,CAAxC,GAAmD,qDAAnF;AACA,mBAAO,IAAI,KAAJ,CAAU,MAAI,iBAAiB,CAAC,SAAD,CAArB,GAAgC,yCAA1C,CAAP;AACH,WAJD,MAIO;AACH,iBAAK,MAAL,CAAY,GAAZ,CAAgB,QAAQ,CAAC,KAAzB,EAAgC,0BAAwB,iBAAiB,CAAC,SAAD,CAAzC,GAAoD,IAApF;;AACA,gBAAI;AACA,qBAAO,KAAK,kBAAL,CAAwB,SAAxB,CAAP;AACH,aAFD,CAEE,OAAO,EAAP,EAAW;AACT,qBAAO,EAAP;AACH;AACJ;AACJ,SAbD,MAaO;AACH,eAAK,MAAL,CAAY,GAAZ,CAAgB,QAAQ,CAAC,KAAzB,EAAgC,yBAAuB,iBAAiB,CAAC,SAAD,CAAxC,GAAmD,+DAAnD,GAAmH,cAAc,CAAC,uBAAD,CAAjI,GAA0J,IAA1L;AACA,iBAAO,IAAI,KAAJ,CAAU,MAAI,iBAAiB,CAAC,SAAD,CAArB,GAAgC,qBAAhC,GAAsD,cAAc,CAAC,uBAAD,CAApE,GAA6F,GAAvG,CAAP;AACH;AACJ,OAnBD,MAmBO;AACH,aAAK,MAAL,CAAY,GAAZ,CAAgB,QAAQ,CAAC,KAAzB,EAAgC,yBAAuB,iBAAiB,CAAC,SAAD,CAAxC,GAAmD,0CAAnF;AACA,eAAO,IAAI,KAAJ,CAAU,MAAI,iBAAiB,CAAC,SAAD,CAArB,GAAgC,8BAA1C,CAAP;AACH;AACJ;AACJ,GA9BO;;AAgCA,EAAA,cAAA,CAAA,SAAA,CAAA,YAAA,GAAR,UAAqB,SAArB,EAAmC;AAC/B,WAAO,SAAS,IAAI,OAAQ,SAAR,KAAuB,QAApC,IAAgD,aAAa,SAApE;AACH,GAFO;;AAIA,EAAA,cAAA,CAAA,SAAA,CAAA,cAAA,GAAR,UAAuB,KAAvB,EAAoC;AAApC,QAAA,KAAA,GAAA,IAAA;;AACI,SAAK,MAAL,CAAY,GAAZ,CAAgB,QAAQ,CAAC,KAAzB,EAAgC,mCAAiC,KAAjC,GAAsC,0BAAtC,GAAiE,KAAK,eAAtE,GAAqF,GAArH;AAEA,SAAK,SAAL,GAAiB,SAAjB,CAHgC,CAKhC;;AACA,IAAA,KAAK,GAAG,KAAK,SAAL,IAAkB,KAA1B;AACA,SAAK,SAAL,GAAiB,SAAjB;;AAEA,QAAI,KAAK,eAAL,KAAoB;AAAA;AAAxB,MAA2D;AACvD,aAAK,MAAL,CAAY,GAAZ,CAAgB,QAAQ,CAAC,KAAzB,EAAgC,2CAAyC,KAAzC,GAA8C,4EAA9E;AACA;AACH;;AAED,QAAI,KAAK,eAAL,KAAoB;AAAA;AAAxB,MAAyD;AACrD,aAAK,MAAL,CAAY,GAAZ,CAAgB,QAAQ,CAAC,OAAzB,EAAkC,2CAAyC,KAAzC,GAA8C,wEAAhF;AACA,cAAM,IAAI,KAAJ,CAAU,mCAAiC,KAAjC,GAAsC,qEAAhD,CAAN;AACH;;AAED,QAAI,KAAK,eAAL,KAAoB;AAAA;AAAxB,MAA4D;AACxD;AACA;AACA,aAAK,mBAAL;AACH;;AAED,QAAI,KAAJ,EAAW;AACP,WAAK,MAAL,CAAY,GAAZ,CAAgB,QAAQ,CAAC,KAAzB,EAAgC,yCAAuC,KAAvC,GAA4C,IAA5E;AACH,KAFD,MAEO;AACH,WAAK,MAAL,CAAY,GAAZ,CAAgB,QAAQ,CAAC,WAAzB,EAAsC,0BAAtC;AACH;;AAED,QAAI,KAAK,SAAT,EAAoB;AAChB,WAAK,SAAL,CAAe,IAAf,GAAsB,KAAtB,CAA4B,UAAC,CAAD,EAAE;AAC1B,QAAA,KAAI,CAAC,MAAL,CAAY,GAAZ,CAAgB,QAAQ,CAAC,KAAzB,EAAgC,4CAA0C,CAA1C,GAA2C,IAA3E;AACH,OAFD;AAGA,WAAK,SAAL,GAAiB,SAAjB;AACH;;AAED,SAAK,YAAL,GAAoB,SAApB;AACA,SAAK,eAAL,GAAoB;AAAA;AAApB;;AAEA,QAAI,KAAK,iBAAT,EAA4B;AACxB,WAAK,iBAAL,GAAyB,KAAzB;;AACA,UAAI;AACA,YAAI,KAAK,OAAT,EAAkB;AACd,eAAK,OAAL,CAAa,KAAb;AACH;AACJ,OAJD,CAIE,OAAO,CAAP,EAAU;AACR,aAAK,MAAL,CAAY,GAAZ,CAAgB,QAAQ,CAAC,KAAzB,EAAgC,4BAA0B,KAA1B,GAA+B,iBAA/B,GAAiD,CAAjD,GAAkD,IAAlF;AACH;AACJ;AACJ,GAnDO;;AAqDA,EAAA,cAAA,CAAA,SAAA,CAAA,UAAA,GAAR,UAAmB,GAAnB,EAA8B;AAC1B;AACA,QAAI,GAAG,CAAC,WAAJ,CAAgB,UAAhB,EAA4B,CAA5B,MAAmC,CAAnC,IAAwC,GAAG,CAAC,WAAJ,CAAgB,SAAhB,EAA2B,CAA3B,MAAkC,CAA9E,EAAiF;AAC7E,aAAO,GAAP;AACH;;AAED,QAAI,CAAC,QAAQ,CAAC,SAAV,IAAuB,CAAC,MAAM,CAAC,QAAnC,EAA6C;AACzC,YAAM,IAAI,KAAJ,CAAU,qBAAmB,GAAnB,GAAsB,IAAhC,CAAN;AACH,KARyB,CAU1B;AACA;AACA;AACA;AACA;;;AACA,QAAM,IAAI,GAAG,MAAM,CAAC,QAAP,CAAgB,aAAhB,CAA8B,GAA9B,CAAb;AACA,IAAA,IAAI,CAAC,IAAL,GAAY,GAAZ;AAEA,SAAK,MAAL,CAAY,GAAZ,CAAgB,QAAQ,CAAC,WAAzB,EAAsC,kBAAgB,GAAhB,GAAmB,QAAnB,GAA4B,IAAI,CAAC,IAAjC,GAAqC,IAA3E;AACA,WAAO,IAAI,CAAC,IAAZ;AACH,GApBO;;AAsBA,EAAA,cAAA,CAAA,SAAA,CAAA,mBAAA,GAAR,UAA4B,GAA5B,EAAuC;AACnC,QAAM,KAAK,GAAG,GAAG,CAAC,OAAJ,CAAY,GAAZ,CAAd;AACA,QAAI,YAAY,GAAG,GAAG,CAAC,SAAJ,CAAc,CAAd,EAAiB,KAAK,KAAK,CAAC,CAAX,GAAe,GAAG,CAAC,MAAnB,GAA4B,KAA7C,CAAnB;;AACA,QAAI,YAAY,CAAC,YAAY,CAAC,MAAb,GAAsB,CAAvB,CAAZ,KAA0C,GAA9C,EAAmD;AAC/C,MAAA,YAAY,IAAI,GAAhB;AACH;;AACD,IAAA,YAAY,IAAI,WAAhB;AACA,IAAA,YAAY,IAAI,KAAK,KAAK,CAAC,CAAX,GAAe,EAAf,GAAoB,GAAG,CAAC,SAAJ,CAAc,KAAd,CAApC;;AAEA,QAAI,YAAY,CAAC,OAAb,CAAqB,kBAArB,MAA6C,CAAC,CAAlD,EAAqD;AACjD,MAAA,YAAY,IAAI,KAAK,KAAK,CAAC,CAAX,GAAe,GAAf,GAAqB,GAArC;AACA,MAAA,YAAY,IAAI,sBAAsB,KAAK,gBAA3C;AACH;;AACD,WAAO,YAAP;AACH,GAdO;;AAeZ,SAAA,cAAA;AAAC,CA5fD,EAAA;;;;AA8fA,SAAA,gBAAA,CAA0B,kBAA1B,EAA6E,eAA7E,EAA+G;AAC3G,SAAO,CAAC,kBAAD,IAAwB,CAAC,eAAe,GAAG,kBAAnB,MAA2C,CAA1E;AACH;AAED;;;AACA,IAAA,kBAAA;AAAA;AAAA,YAAA;AAOI,WAAA,kBAAA,CAA6B,SAA7B,EAAkD;AAArB,SAAA,SAAA,GAAA,SAAA;AANrB,SAAA,MAAA,GAAgB,EAAhB;AAEA,SAAA,SAAA,GAAqB,IAArB;AAKJ,SAAK,gBAAL,GAAwB,IAAI,aAAJ,EAAxB;AACA,SAAK,eAAL,GAAuB,IAAI,aAAJ,EAAvB;AAEA,SAAK,eAAL,GAAuB,KAAK,QAAL,EAAvB;AACH;;AAEM,EAAA,kBAAA,CAAA,SAAA,CAAA,IAAA,GAAP,UAAY,IAAZ,EAAsC;AAClC,SAAK,UAAL,CAAgB,IAAhB;;AACA,QAAI,CAAC,KAAK,eAAV,EAA2B;AACvB,WAAK,eAAL,GAAuB,IAAI,aAAJ,EAAvB;AACH;;AACD,WAAO,KAAK,eAAL,CAAqB,OAA5B;AACH,GANM;;AAQA,EAAA,kBAAA,CAAA,SAAA,CAAA,IAAA,GAAP,YAAA;AACI,SAAK,SAAL,GAAiB,KAAjB;AACA,SAAK,gBAAL,CAAsB,OAAtB;AACA,WAAO,KAAK,eAAZ;AACH,GAJM;;AAMC,EAAA,kBAAA,CAAA,SAAA,CAAA,UAAA,GAAR,UAAmB,IAAnB,EAA6C;AACzC,QAAI,KAAK,MAAL,CAAY,MAAZ,IAAsB,OAAO,KAAK,MAAL,CAAY,CAAZ,CAAP,KAA2B,OAAO,IAA5D,EAAmE;AAC/D,YAAM,IAAI,KAAJ,CAAU,iCAA+B,OAAO,KAAK,MAA3C,GAAkD,mBAAlD,GAAsE,OAAO,IAAvF,CAAN;AACH;;AAED,SAAK,MAAL,CAAY,IAAZ,CAAiB,IAAjB;AACA,SAAK,gBAAL,CAAsB,OAAtB;AACH,GAPO;;AASM,EAAA,kBAAA,CAAA,SAAA,CAAA,QAAA,GAAd,YAAA;;;;;;iBACW,I,EAAI,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACP,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,gBAAL,CAAsB,OAA5B,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AAEA,gBAAI,CAAC,KAAK,SAAV,EAAqB;AACjB,kBAAI,KAAK,eAAT,EAA0B;AACtB,qBAAK,eAAL,CAAqB,MAArB,CAA4B,qBAA5B;AACH;;AAED,qBAAA,CAAA;AAAA;AAAA,gBAAA,CAAA,CAAA;AACH;;AAED,iBAAK,gBAAL,GAAwB,IAAI,aAAJ,EAAxB;AAEM,YAAA,eAAe,GAAG,KAAK,eAAvB;AACN,iBAAK,eAAL,GAAuB,SAAvB;AAEM,YAAA,IAAI,GAAG,OAAO,KAAK,MAAL,CAAY,CAAZ,CAAP,KAA2B,QAA3B,GACT,KAAK,MAAL,CAAY,IAAZ,CAAiB,EAAjB,CADS,GAET,kBAAkB,CAAC,aAAnB,CAAiC,KAAK,MAAtC,CAFE;AAIN,iBAAK,MAAL,CAAY,MAAZ,GAAqB,CAArB;;;;;;AAGI,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,SAAL,CAAe,IAAf,CAAoB,IAApB,CAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AACA,YAAA,eAAe,CAAC,OAAhB;;;;;;;AAEA,YAAA,eAAe,CAAC,MAAhB,CAAuB,OAAvB;;;;;;;;;;;;;;;;;AAGX,GA9Ba;;AAgCC,EAAA,kBAAA,CAAA,aAAA,GAAf,UAA6B,YAA7B,EAAwD;AACpD,QAAM,WAAW,GAAG,YAAY,CAAC,GAAb,CAAiB,UAAC,CAAD,EAAE;AAAK,aAAA,CAAC,CAAD,UAAA;AAAY,KAApC,EAAsC,MAAtC,CAA6C,UAAC,CAAD,EAAI,CAAJ,EAAK;AAAK,aAAA,CAAC,GAAD,CAAA;AAAK,KAA5D,CAApB;AACA,QAAM,MAAM,GAAG,IAAI,UAAJ,CAAe,WAAf,CAAf;AACA,QAAI,MAAM,GAAG,CAAb;;AACA,SAAmB,IAAA,EAAA,GAAA,CAAA,EAAA,cAAA,GAAA,YAAnB,EAAmB,EAAA,GAAA,cAAA,CAAA,MAAnB,EAAmB,EAAA,EAAnB,EAAiC;AAA5B,UAAM,IAAI,GAAA,cAAA,CAAA,EAAA,CAAV;AACD,MAAA,MAAM,CAAC,GAAP,CAAW,IAAI,UAAJ,CAAe,IAAf,CAAX,EAAiC,MAAjC;AACA,MAAA,MAAM,IAAI,IAAI,CAAC,UAAf;AACH;;AAED,WAAO,MAAM,CAAC,MAAd;AACH,GAVc;;AAWnB,SAAA,kBAAA;AAAC,CAhFD,EAAA;;;;AAkFA,IAAA,aAAA;AAAA;AAAA,YAAA;AAKI,WAAA,aAAA,GAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACI,SAAK,OAAL,GAAe,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;;;AAAK,aAAA,EAAA,GAAA,CAAA,OAAA,EAAA,MAAA,CAAA,EAAC,KAAA,CAAA,QAAA,GAAA,EAAA,CAAA,CAAA,CAAD,EAAgB,KAAA,CAAA,QAAA,GAAA,EAAA,CAAA,CAAA,CAAhB,EAA6B,EAA7B;AAAkD,KAAnF,CAAf;AACH;;AAEM,EAAA,aAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;AACI,SAAK,QAAL;AACH,GAFM;;AAIA,EAAA,aAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UAAc,MAAd,EAA0B;AACtB,SAAK,QAAL,CAAe,MAAf;AACH,GAFM;;AAGX,SAAA,aAAA;AAAC,CAhBD,EAAA","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { DefaultHttpClient } from \"./DefaultHttpClient\";\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { HttpTransportType, ITransport, TransferFormat } from \"./ITransport\";\r\nimport { LongPollingTransport } from \"./LongPollingTransport\";\r\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\r\nimport { Arg, createLogger, getUserAgentHeader, Platform } from \"./Utils\";\r\nimport { WebSocketTransport } from \"./WebSocketTransport\";\r\n\r\n/** @private */\r\nconst enum ConnectionState {\r\n    Connecting = \"Connecting\",\r\n    Connected = \"Connected\",\r\n    Disconnected = \"Disconnected\",\r\n    Disconnecting = \"Disconnecting\",\r\n}\r\n\r\n/** @private */\r\nexport interface INegotiateResponse {\r\n    connectionId?: string;\r\n    connectionToken?: string;\r\n    negotiateVersion?: number;\r\n    availableTransports?: IAvailableTransport[];\r\n    url?: string;\r\n    accessToken?: string;\r\n    error?: string;\r\n}\r\n\r\n/** @private */\r\nexport interface IAvailableTransport {\r\n    transport: keyof typeof HttpTransportType;\r\n    transferFormats: Array<keyof typeof TransferFormat>;\r\n}\r\n\r\nconst MAX_REDIRECTS = 100;\r\n\r\n/** @private */\r\nexport class HttpConnection implements IConnection {\r\n    private connectionState: ConnectionState;\r\n    // connectionStarted is tracked independently from connectionState, so we can check if the\r\n    // connection ever did successfully transition from connecting to connected before disconnecting.\r\n    private connectionStarted: boolean;\r\n    private readonly httpClient: HttpClient;\r\n    private readonly logger: ILogger;\r\n    private readonly options: IHttpConnectionOptions;\r\n    private transport?: ITransport;\r\n    private startInternalPromise?: Promise<void>;\r\n    private stopPromise?: Promise<void>;\r\n    private stopPromiseResolver!: (value?: PromiseLike<void>) => void;\r\n    private stopError?: Error;\r\n    private accessTokenFactory?: () => string | Promise<string>;\r\n    private sendQueue?: TransportSendQueue;\r\n\r\n    public readonly features: any = {};\r\n    public baseUrl: string;\r\n    public connectionId?: string;\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((e?: Error) => void) | null;\r\n\r\n    private readonly negotiateVersion: number = 1;\r\n\r\n    constructor(url: string, options: IHttpConnectionOptions = {}) {\r\n        Arg.isRequired(url, \"url\");\r\n\r\n        this.logger = createLogger(options.logger);\r\n        this.baseUrl = this.resolveUrl(url);\r\n\r\n        options = options || {};\r\n        options.logMessageContent = options.logMessageContent === undefined ? false : options.logMessageContent;\r\n        if (typeof options.withCredentials === \"boolean\" || options.withCredentials === undefined) {\r\n            options.withCredentials = options.withCredentials === undefined ? true : options.withCredentials;\r\n        } else {\r\n            throw new Error(\"withCredentials option was not a 'boolean' or 'undefined' value\");\r\n        }\r\n\r\n        let webSocketModule: any = null;\r\n        let eventSourceModule: any = null;\r\n\r\n        if (Platform.isNode && typeof require !== \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n            webSocketModule = requireFunc(\"ws\");\r\n            eventSourceModule = requireFunc(\"eventsource\");\r\n        }\r\n\r\n        if (!Platform.isNode && typeof WebSocket !== \"undefined\" && !options.WebSocket) {\r\n            options.WebSocket = WebSocket;\r\n        } else if (Platform.isNode && !options.WebSocket) {\r\n            if (webSocketModule) {\r\n                options.WebSocket = webSocketModule;\r\n            }\r\n        }\r\n\r\n        if (!Platform.isNode && typeof EventSource !== \"undefined\" && !options.EventSource) {\r\n            options.EventSource = EventSource;\r\n        } else if (Platform.isNode && !options.EventSource) {\r\n            if (typeof eventSourceModule !== \"undefined\") {\r\n                options.EventSource = eventSourceModule;\r\n            }\r\n        }\r\n\r\n        this.httpClient = options.httpClient || new DefaultHttpClient(this.logger);\r\n        this.connectionState = ConnectionState.Disconnected;\r\n        this.connectionStarted = false;\r\n        this.options = options;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public start(): Promise<void>;\r\n    public start(transferFormat: TransferFormat): Promise<void>;\r\n    public async start(transferFormat?: TransferFormat): Promise<void> {\r\n        transferFormat = transferFormat || TransferFormat.Binary;\r\n\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this.logger.log(LogLevel.Debug, `Starting connection with transfer format '${TransferFormat[transferFormat]}'.`);\r\n\r\n        if (this.connectionState !== ConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start an HttpConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this.connectionState = ConnectionState.Connecting;\r\n\r\n        this.startInternalPromise = this.startInternal(transferFormat);\r\n        await this.startInternalPromise;\r\n\r\n        // The TypeScript compiler thinks that connectionState must be Connecting here. The TypeScript compiler is wrong.\r\n        if (this.connectionState as any === ConnectionState.Disconnecting) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"Failed to start the HttpConnection before stop() was called.\";\r\n            this.logger.log(LogLevel.Error, message);\r\n\r\n            // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.\r\n            await this.stopPromise;\r\n\r\n            return Promise.reject(new Error(message));\r\n        } else if (this.connectionState as any !== ConnectionState.Connected) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!\";\r\n            this.logger.log(LogLevel.Error, message);\r\n            return Promise.reject(new Error(message));\r\n        }\r\n\r\n        this.connectionStarted = true;\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer): Promise<void> {\r\n        if (this.connectionState !== ConnectionState.Connected) {\r\n            return Promise.reject(new Error(\"Cannot send data if the connection is not in the 'Connected' State.\"));\r\n        }\r\n\r\n        if (!this.sendQueue) {\r\n            this.sendQueue = new TransportSendQueue(this.transport!);\r\n        }\r\n\r\n        // Transport will not be null if state is connected\r\n        return this.sendQueue.send(data);\r\n    }\r\n\r\n    public async stop(error?: Error): Promise<void> {\r\n        if (this.connectionState === ConnectionState.Disconnected) {\r\n            this.logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this.connectionState === ConnectionState.Disconnecting) {\r\n            this.logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this.stopPromise;\r\n        }\r\n\r\n        this.connectionState = ConnectionState.Disconnecting;\r\n\r\n        this.stopPromise = new Promise((resolve) => {\r\n            // Don't complete stop() until stopConnection() completes.\r\n            this.stopPromiseResolver = resolve;\r\n        });\r\n\r\n        // stopInternal should never throw so just observe it.\r\n        await this.stopInternal(error);\r\n        await this.stopPromise;\r\n    }\r\n\r\n    private async stopInternal(error?: Error): Promise<void> {\r\n        // Set error as soon as possible otherwise there is a race between\r\n        // the transport closing and providing an error and the error from a close message\r\n        // We would prefer the close message error.\r\n        this.stopError = error;\r\n\r\n        try {\r\n            await this.startInternalPromise;\r\n        } catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n\r\n        // The transport's onclose will trigger stopConnection which will run our onclose event.\r\n        // The transport should always be set if currently connected. If it wasn't set, it's likely because\r\n        // stop was called during start() and start() failed.\r\n        if (this.transport) {\r\n            try {\r\n                await this.transport.stop();\r\n            } catch (e) {\r\n                this.logger.log(LogLevel.Error, `HttpConnection.transport.stop() threw error '${e}'.`);\r\n                this.stopConnection();\r\n            }\r\n\r\n            this.transport = undefined;\r\n        } else {\r\n            this.logger.log(LogLevel.Debug, \"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.\");\r\n            this.stopConnection();\r\n        }\r\n    }\r\n\r\n    private async startInternal(transferFormat: TransferFormat): Promise<void> {\r\n        // Store the original base url and the access token factory since they may change\r\n        // as part of negotiating\r\n        let url = this.baseUrl;\r\n        this.accessTokenFactory = this.options.accessTokenFactory;\r\n\r\n        try {\r\n            if (this.options.skipNegotiation) {\r\n                if (this.options.transport === HttpTransportType.WebSockets) {\r\n                    // No need to add a connection ID in this case\r\n                    this.transport = this.constructTransport(HttpTransportType.WebSockets);\r\n                    // We should just call connect directly in this case.\r\n                    // No fallback or negotiate in this case.\r\n                    await this.startTransport(url, transferFormat);\r\n                } else {\r\n                    throw new Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\r\n                }\r\n            } else {\r\n                let negotiateResponse: INegotiateResponse | null = null;\r\n                let redirects = 0;\r\n\r\n                do {\r\n                    negotiateResponse = await this.getNegotiationResponse(url);\r\n                    // the user tries to stop the connection when it is being started\r\n                    if (this.connectionState === ConnectionState.Disconnecting || this.connectionState === ConnectionState.Disconnected) {\r\n                        throw new Error(\"The connection was stopped during negotiation.\");\r\n                    }\r\n\r\n                    if (negotiateResponse.error) {\r\n                        throw new Error(negotiateResponse.error);\r\n                    }\r\n\r\n                    if ((negotiateResponse as any).ProtocolVersion) {\r\n                        throw new Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\r\n                    }\r\n\r\n                    if (negotiateResponse.url) {\r\n                        url = negotiateResponse.url;\r\n                    }\r\n\r\n                    if (negotiateResponse.accessToken) {\r\n                        // Replace the current access token factory with one that uses\r\n                        // the returned access token\r\n                        const accessToken = negotiateResponse.accessToken;\r\n                        this.accessTokenFactory = () => accessToken;\r\n                    }\r\n\r\n                    redirects++;\r\n                }\r\n                while (negotiateResponse.url && redirects < MAX_REDIRECTS);\r\n\r\n                if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\r\n                    throw new Error(\"Negotiate redirection limit exceeded.\");\r\n                }\r\n\r\n                await this.createTransport(url, this.options.transport, negotiateResponse, transferFormat);\r\n            }\r\n\r\n            if (this.transport instanceof LongPollingTransport) {\r\n                this.features.inherentKeepAlive = true;\r\n            }\r\n\r\n            if (this.connectionState === ConnectionState.Connecting) {\r\n                // Ensure the connection transitions to the connected state prior to completing this.startInternalPromise.\r\n                // start() will handle the case when stop was called and startInternal exits still in the disconnecting state.\r\n                this.logger.log(LogLevel.Debug, \"The HttpConnection connected successfully.\");\r\n                this.connectionState = ConnectionState.Connected;\r\n            }\r\n\r\n            // stop() is waiting on us via this.startInternalPromise so keep this.transport around so it can clean up.\r\n            // This is the only case startInternal can exit in neither the connected nor disconnected state because stopConnection()\r\n            // will transition to the disconnected state. start() will wait for the transition using the stopPromise.\r\n        } catch (e) {\r\n            this.logger.log(LogLevel.Error, \"Failed to start the connection: \" + e);\r\n            this.connectionState = ConnectionState.Disconnected;\r\n            this.transport = undefined;\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private async getNegotiationResponse(url: string): Promise<INegotiateResponse> {\r\n        const headers = {};\r\n        if (this.accessTokenFactory) {\r\n            const token = await this.accessTokenFactory();\r\n            if (token) {\r\n                headers[`Authorization`] = `Bearer ${token}`;\r\n            }\r\n        }\r\n\r\n        const [name, value] = getUserAgentHeader();\r\n        headers[name] = value;\r\n\r\n        const negotiateUrl = this.resolveNegotiateUrl(url);\r\n        this.logger.log(LogLevel.Debug, `Sending negotiation request: ${negotiateUrl}.`);\r\n        try {\r\n            const response = await this.httpClient.post(negotiateUrl, {\r\n                content: \"\",\r\n                headers: { ...headers, ...this.options.headers },\r\n                withCredentials: this.options.withCredentials,\r\n            });\r\n\r\n            if (response.statusCode !== 200) {\r\n                return Promise.reject(new Error(`Unexpected status code returned from negotiate '${response.statusCode}'`));\r\n            }\r\n\r\n            const negotiateResponse = JSON.parse(response.content as string) as INegotiateResponse;\r\n            if (!negotiateResponse.negotiateVersion || negotiateResponse.negotiateVersion < 1) {\r\n                // Negotiate version 0 doesn't use connectionToken\r\n                // So we set it equal to connectionId so all our logic can use connectionToken without being aware of the negotiate version\r\n                negotiateResponse.connectionToken = negotiateResponse.connectionId;\r\n            }\r\n            return negotiateResponse;\r\n        } catch (e) {\r\n            this.logger.log(LogLevel.Error, \"Failed to complete negotiation with the server: \" + e);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private createConnectUrl(url: string, connectionToken: string | null | undefined) {\r\n        if (!connectionToken) {\r\n            return url;\r\n        }\r\n\r\n        return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${connectionToken}`;\r\n    }\r\n\r\n    private async createTransport(url: string, requestedTransport: HttpTransportType | ITransport | undefined, negotiateResponse: INegotiateResponse, requestedTransferFormat: TransferFormat): Promise<void> {\r\n        let connectUrl = this.createConnectUrl(url, negotiateResponse.connectionToken);\r\n        if (this.isITransport(requestedTransport)) {\r\n            this.logger.log(LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\r\n            this.transport = requestedTransport;\r\n            await this.startTransport(connectUrl, requestedTransferFormat);\r\n\r\n            this.connectionId = negotiateResponse.connectionId;\r\n            return;\r\n        }\r\n\r\n        const transportExceptions: any[] = [];\r\n        const transports = negotiateResponse.availableTransports || [];\r\n        let negotiate: INegotiateResponse | undefined = negotiateResponse;\r\n        for (const endpoint of transports) {\r\n            const transportOrError = this.resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat);\r\n            if (transportOrError instanceof Error) {\r\n                // Store the error and continue, we don't want to cause a re-negotiate in these cases\r\n                transportExceptions.push(`${endpoint.transport} failed: ${transportOrError}`);\r\n            } else if (this.isITransport(transportOrError)) {\r\n                this.transport = transportOrError;\r\n                if (!negotiate) {\r\n                    try {\r\n                        negotiate = await this.getNegotiationResponse(url);\r\n                    } catch (ex) {\r\n                        return Promise.reject(ex);\r\n                    }\r\n                    connectUrl = this.createConnectUrl(url, negotiate.connectionToken);\r\n                }\r\n                try {\r\n                    await this.startTransport(connectUrl, requestedTransferFormat);\r\n                    this.connectionId = negotiate.connectionId;\r\n                    return;\r\n                } catch (ex) {\r\n                    this.logger.log(LogLevel.Error, `Failed to start the transport '${endpoint.transport}': ${ex}`);\r\n                    negotiate = undefined;\r\n                    transportExceptions.push(`${endpoint.transport} failed: ${ex}`);\r\n\r\n                    if (this.connectionState !== ConnectionState.Connecting) {\r\n                        const message = \"Failed to select transport before stop() was called.\";\r\n                        this.logger.log(LogLevel.Debug, message);\r\n                        return Promise.reject(new Error(message));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (transportExceptions.length > 0) {\r\n            return Promise.reject(new Error(`Unable to connect to the server with any of the available transports. ${transportExceptions.join(\" \")}`));\r\n        }\r\n        return Promise.reject(new Error(\"None of the transports supported by the client are supported by the server.\"));\r\n    }\r\n\r\n    private constructTransport(transport: HttpTransportType): ITransport {\r\n        switch (transport) {\r\n            case HttpTransportType.WebSockets:\r\n                if (!this.options.WebSocket) {\r\n                    throw new Error(\"'WebSocket' is not supported in your environment.\");\r\n                }\r\n                return new WebSocketTransport(this.httpClient, this.accessTokenFactory, this.logger, this.options.logMessageContent || false, this.options.WebSocket, this.options.headers || {});\r\n            case HttpTransportType.ServerSentEvents:\r\n                if (!this.options.EventSource) {\r\n                    throw new Error(\"'EventSource' is not supported in your environment.\");\r\n                }\r\n                return new ServerSentEventsTransport(this.httpClient, this.accessTokenFactory, this.logger, this.options.logMessageContent || false, this.options.EventSource, this.options.withCredentials!, this.options.headers || {});\r\n            case HttpTransportType.LongPolling:\r\n                return new LongPollingTransport(this.httpClient, this.accessTokenFactory, this.logger, this.options.logMessageContent || false, this.options.withCredentials!, this.options.headers || {});\r\n            default:\r\n                throw new Error(`Unknown transport: ${transport}.`);\r\n        }\r\n    }\r\n\r\n    private startTransport(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        this.transport!.onreceive = this.onreceive;\r\n        this.transport!.onclose = (e) => this.stopConnection(e);\r\n        return this.transport!.connect(url, transferFormat);\r\n    }\r\n\r\n    private resolveTransportOrError(endpoint: IAvailableTransport, requestedTransport: HttpTransportType | undefined, requestedTransferFormat: TransferFormat): ITransport | Error {\r\n        const transport = HttpTransportType[endpoint.transport];\r\n        if (transport === null || transport === undefined) {\r\n            this.logger.log(LogLevel.Debug, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n            return new Error(`Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n        } else {\r\n            if (transportMatches(requestedTransport, transport)) {\r\n                const transferFormats = endpoint.transferFormats.map((s) => TransferFormat[s]);\r\n                if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\r\n                    if ((transport === HttpTransportType.WebSockets && !this.options.WebSocket) ||\r\n                        (transport === HttpTransportType.ServerSentEvents && !this.options.EventSource)) {\r\n                        this.logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it is not supported in your environment.'`);\r\n                        return new Error(`'${HttpTransportType[transport]}' is not supported in your environment.`);\r\n                    } else {\r\n                        this.logger.log(LogLevel.Debug, `Selecting transport '${HttpTransportType[transport]}'.`);\r\n                        try {\r\n                            return this.constructTransport(transport);\r\n                        } catch (ex) {\r\n                            return ex;\r\n                        }\r\n                    }\r\n                } else {\r\n                    this.logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it does not support the requested transfer format '${TransferFormat[requestedTransferFormat]}'.`);\r\n                    return new Error(`'${HttpTransportType[transport]}' does not support ${TransferFormat[requestedTransferFormat]}.`);\r\n                }\r\n            } else {\r\n                this.logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it was disabled by the client.`);\r\n                return new Error(`'${HttpTransportType[transport]}' is disabled by the client.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private isITransport(transport: any): transport is ITransport {\r\n        return transport && typeof (transport) === \"object\" && \"connect\" in transport;\r\n    }\r\n\r\n    private stopConnection(error?: Error): void {\r\n        this.logger.log(LogLevel.Debug, `HttpConnection.stopConnection(${error}) called while in state ${this.connectionState}.`);\r\n\r\n        this.transport = undefined;\r\n\r\n        // If we have a stopError, it takes precedence over the error from the transport\r\n        error = this.stopError || error;\r\n        this.stopError = undefined;\r\n\r\n        if (this.connectionState === ConnectionState.Disconnected) {\r\n            this.logger.log(LogLevel.Debug, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is already in the disconnected state.`);\r\n            return;\r\n        }\r\n\r\n        if (this.connectionState === ConnectionState.Connecting) {\r\n            this.logger.log(LogLevel.Warning, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is still in the connecting state.`);\r\n            throw new Error(`HttpConnection.stopConnection(${error}) was called while the connection is still in the connecting state.`);\r\n        }\r\n\r\n        if (this.connectionState === ConnectionState.Disconnecting) {\r\n            // A call to stop() induced this call to stopConnection and needs to be completed.\r\n            // Any stop() awaiters will be scheduled to continue after the onclose callback fires.\r\n            this.stopPromiseResolver();\r\n        }\r\n\r\n        if (error) {\r\n            this.logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\r\n        } else {\r\n            this.logger.log(LogLevel.Information, \"Connection disconnected.\");\r\n        }\r\n\r\n        if (this.sendQueue) {\r\n            this.sendQueue.stop().catch((e) => {\r\n                this.logger.log(LogLevel.Error, `TransportSendQueue.stop() threw error '${e}'.`);\r\n            });\r\n            this.sendQueue = undefined;\r\n        }\r\n\r\n        this.connectionId = undefined;\r\n        this.connectionState = ConnectionState.Disconnected;\r\n\r\n        if (this.connectionStarted) {\r\n            this.connectionStarted = false;\r\n            try {\r\n                if (this.onclose) {\r\n                    this.onclose(error);\r\n                }\r\n            } catch (e) {\r\n                this.logger.log(LogLevel.Error, `HttpConnection.onclose(${error}) threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private resolveUrl(url: string): string {\r\n        // startsWith is not supported in IE\r\n        if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\r\n            return url;\r\n        }\r\n\r\n        if (!Platform.isBrowser || !window.document) {\r\n            throw new Error(`Cannot resolve '${url}'.`);\r\n        }\r\n\r\n        // Setting the url to the href propery of an anchor tag handles normalization\r\n        // for us. There are 3 main cases.\r\n        // 1. Relative path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\r\n        // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\r\n        // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\r\n        const aTag = window.document.createElement(\"a\");\r\n        aTag.href = url;\r\n\r\n        this.logger.log(LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\r\n        return aTag.href;\r\n    }\r\n\r\n    private resolveNegotiateUrl(url: string): string {\r\n        const index = url.indexOf(\"?\");\r\n        let negotiateUrl = url.substring(0, index === -1 ? url.length : index);\r\n        if (negotiateUrl[negotiateUrl.length - 1] !== \"/\") {\r\n            negotiateUrl += \"/\";\r\n        }\r\n        negotiateUrl += \"negotiate\";\r\n        negotiateUrl += index === -1 ? \"\" : url.substring(index);\r\n\r\n        if (negotiateUrl.indexOf(\"negotiateVersion\") === -1) {\r\n            negotiateUrl += index === -1 ? \"?\" : \"&\";\r\n            negotiateUrl += \"negotiateVersion=\" + this.negotiateVersion;\r\n        }\r\n        return negotiateUrl;\r\n    }\r\n}\r\n\r\nfunction transportMatches(requestedTransport: HttpTransportType | undefined, actualTransport: HttpTransportType) {\r\n    return !requestedTransport || ((actualTransport & requestedTransport) !== 0);\r\n}\r\n\r\n/** @private */\r\nexport class TransportSendQueue {\r\n    private buffer: any[] = [];\r\n    private sendBufferedData: PromiseSource;\r\n    private executing: boolean = true;\r\n    private transportResult?: PromiseSource;\r\n    private sendLoopPromise: Promise<void>;\r\n\r\n    constructor(private readonly transport: ITransport) {\r\n        this.sendBufferedData = new PromiseSource();\r\n        this.transportResult = new PromiseSource();\r\n\r\n        this.sendLoopPromise = this.sendLoop();\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer): Promise<void> {\r\n        this.bufferData(data);\r\n        if (!this.transportResult) {\r\n            this.transportResult = new PromiseSource();\r\n        }\r\n        return this.transportResult.promise;\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this.executing = false;\r\n        this.sendBufferedData.resolve();\r\n        return this.sendLoopPromise;\r\n    }\r\n\r\n    private bufferData(data: string | ArrayBuffer): void {\r\n        if (this.buffer.length && typeof(this.buffer[0]) !== typeof(data)) {\r\n            throw new Error(`Expected data to be of type ${typeof(this.buffer)} but was of type ${typeof(data)}`);\r\n        }\r\n\r\n        this.buffer.push(data);\r\n        this.sendBufferedData.resolve();\r\n    }\r\n\r\n    private async sendLoop(): Promise<void> {\r\n        while (true) {\r\n            await this.sendBufferedData.promise;\r\n\r\n            if (!this.executing) {\r\n                if (this.transportResult) {\r\n                    this.transportResult.reject(\"Connection stopped.\");\r\n                }\r\n\r\n                break;\r\n            }\r\n\r\n            this.sendBufferedData = new PromiseSource();\r\n\r\n            const transportResult = this.transportResult!;\r\n            this.transportResult = undefined;\r\n\r\n            const data = typeof(this.buffer[0]) === \"string\" ?\r\n                this.buffer.join(\"\") :\r\n                TransportSendQueue.concatBuffers(this.buffer);\r\n\r\n            this.buffer.length = 0;\r\n\r\n            try {\r\n                await this.transport.send(data);\r\n                transportResult.resolve();\r\n            } catch (error) {\r\n                transportResult.reject(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static concatBuffers(arrayBuffers: ArrayBuffer[]): ArrayBuffer {\r\n        const totalLength = arrayBuffers.map((b) => b.byteLength).reduce((a, b) => a + b);\r\n        const result = new Uint8Array(totalLength);\r\n        let offset = 0;\r\n        for (const item of arrayBuffers) {\r\n            result.set(new Uint8Array(item), offset);\r\n            offset += item.byteLength;\r\n        }\r\n\r\n        return result.buffer;\r\n    }\r\n}\r\n\r\nclass PromiseSource {\r\n    private resolver?: () => void;\r\n    private rejecter!: (reason?: any) => void;\r\n    public promise: Promise<void>;\r\n\r\n    constructor() {\r\n        this.promise = new Promise((resolve, reject) => [this.resolver, this.rejecter] = [resolve, reject]);\r\n    }\r\n\r\n    public resolve(): void {\r\n        this.resolver!();\r\n    }\r\n\r\n    public reject(reason?: any): void {\r\n        this.rejecter!(reason);\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}