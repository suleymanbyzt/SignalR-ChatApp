{"ast":null,"code":"// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nimport { SubjectSubscription } from \"./Utils\";\n/** Stream implementation to stream items to the server. */\n\nvar Subject =\n/** @class */\nfunction () {\n  function Subject() {\n    this.observers = [];\n  }\n\n  Subject.prototype.next = function (item) {\n    for (var _i = 0, _a = this.observers; _i < _a.length; _i++) {\n      var observer = _a[_i];\n      observer.next(item);\n    }\n  };\n\n  Subject.prototype.error = function (err) {\n    for (var _i = 0, _a = this.observers; _i < _a.length; _i++) {\n      var observer = _a[_i];\n\n      if (observer.error) {\n        observer.error(err);\n      }\n    }\n  };\n\n  Subject.prototype.complete = function () {\n    for (var _i = 0, _a = this.observers; _i < _a.length; _i++) {\n      var observer = _a[_i];\n\n      if (observer.complete) {\n        observer.complete();\n      }\n    }\n  };\n\n  Subject.prototype.subscribe = function (observer) {\n    this.observers.push(observer);\n    return new SubjectSubscription(this, observer);\n  };\n\n  return Subject;\n}();\n\nexport { Subject };","map":{"version":3,"sources":["../../src/Subject.ts"],"names":[],"mappings":"AAAA;AACA;AAGA,SAAS,mBAAT,QAAoC,SAApC;AAEA;;AACA,IAAA,OAAA;AAAA;AAAA,YAAA;AAOI,WAAA,OAAA,GAAA;AACI,SAAK,SAAL,GAAiB,EAAjB;AACH;;AAEM,EAAA,OAAA,CAAA,SAAA,CAAA,IAAA,GAAP,UAAY,IAAZ,EAAmB;AACf,SAAuB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,KAAK,SAA5B,EAAuB,EAAA,GAAA,EAAA,CAAA,MAAvB,EAAuB,EAAA,EAAvB,EAAuC;AAAlC,UAAM,QAAQ,GAAA,EAAA,CAAA,EAAA,CAAd;AACD,MAAA,QAAQ,CAAC,IAAT,CAAc,IAAd;AACH;AACJ,GAJM;;AAMA,EAAA,OAAA,CAAA,SAAA,CAAA,KAAA,GAAP,UAAa,GAAb,EAAqB;AACjB,SAAuB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,KAAK,SAA5B,EAAuB,EAAA,GAAA,EAAA,CAAA,MAAvB,EAAuB,EAAA,EAAvB,EAAuC;AAAlC,UAAM,QAAQ,GAAA,EAAA,CAAA,EAAA,CAAd;;AACD,UAAI,QAAQ,CAAC,KAAb,EAAoB;AAChB,QAAA,QAAQ,CAAC,KAAT,CAAe,GAAf;AACH;AACJ;AACJ,GANM;;AAQA,EAAA,OAAA,CAAA,SAAA,CAAA,QAAA,GAAP,YAAA;AACI,SAAuB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,KAAK,SAA5B,EAAuB,EAAA,GAAA,EAAA,CAAA,MAAvB,EAAuB,EAAA,EAAvB,EAAuC;AAAlC,UAAM,QAAQ,GAAA,EAAA,CAAA,EAAA,CAAd;;AACD,UAAI,QAAQ,CAAC,QAAb,EAAuB;AACnB,QAAA,QAAQ,CAAC,QAAT;AACH;AACJ;AACJ,GANM;;AAQA,EAAA,OAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,QAAjB,EAA+C;AAC3C,SAAK,SAAL,CAAe,IAAf,CAAoB,QAApB;AACA,WAAO,IAAI,mBAAJ,CAAwB,IAAxB,EAA8B,QAA9B,CAAP;AACH,GAHM;;AAIX,SAAA,OAAA;AAAC,CArCD,EAAA","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { IStreamResult, IStreamSubscriber, ISubscription } from \"./Stream\";\r\nimport { SubjectSubscription } from \"./Utils\";\r\n\r\n/** Stream implementation to stream items to the server. */\r\nexport class Subject<T> implements IStreamResult<T> {\r\n    /** @internal */\r\n    public observers: Array<IStreamSubscriber<T>>;\r\n\r\n    /** @internal */\r\n    public cancelCallback?: () => Promise<void>;\r\n\r\n    constructor() {\r\n        this.observers = [];\r\n    }\r\n\r\n    public next(item: T): void {\r\n        for (const observer of this.observers) {\r\n            observer.next(item);\r\n        }\r\n    }\r\n\r\n    public error(err: any): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.error) {\r\n                observer.error(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    public complete(): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.complete) {\r\n                observer.complete();\r\n            }\r\n        }\r\n    }\r\n\r\n    public subscribe(observer: IStreamSubscriber<T>): ISubscription<T> {\r\n        this.observers.push(observer);\r\n        return new SubjectSubscription(this, observer);\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}