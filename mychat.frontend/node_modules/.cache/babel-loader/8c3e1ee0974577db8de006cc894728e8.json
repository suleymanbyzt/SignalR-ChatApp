{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\suleyman.bayazit\\\\WebstormProjects\\\\chat\\\\mychat.frontend\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\nimport Lobby from './components/Lobby';\nimport Chat from './components/Chat';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [connection, setConnection] = useState();\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState([]);\n\n  const joinRoom = async (user, room) => {\n    try {\n      const connection = new HubConnectionBuilder().withUrl(\"https://localhost:5001/chat\").configureLogging(LogLevel.Information).build();\n      connection.on(\"ReceiveMessage\", (user, message) => {\n        setMessages(messages => [...messages, {\n          user,\n          message\n        }]);\n      });\n      connection.on(\"UsersInRoom\", users => {\n        setUsers(users);\n      });\n      connection.onclose(e => {\n        setConnection();\n        setMessages([]);\n        setUsers([]);\n      });\n      await connection.start();\n      await connection.invoke(\"JoinRoom\", {\n        user,\n        room\n      });\n      setConnection(connection);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const sendMessage = async message => {\n    try {\n      await connection.invoke(\"SendMessage\", message);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const closeConnection = async () => {\n    try {\n      await connection.stop();\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"SignalR Chat App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n      className: \"line\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }, this), !connection ? /*#__PURE__*/_jsxDEV(Lobby, {\n      joinRoom: joinRoom\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Chat, {\n      sendMessage: sendMessage,\n      messages: messages,\n      users: users,\n      closeConnection: closeConnection\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 10\n  }, this);\n};\n\n_s(App, \"elKLwHMWYcK5yhCphv5cZGsOnig=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/suleyman.bayazit/WebstormProjects/chat/mychat.frontend/src/App.js"],"names":["useState","HubConnectionBuilder","LogLevel","Lobby","Chat","App","connection","setConnection","messages","setMessages","users","setUsers","joinRoom","user","room","withUrl","configureLogging","Information","build","on","message","onclose","e","start","invoke","console","log","sendMessage","closeConnection","stop"],"mappings":"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","sourcesContent":["import { useState } from 'react';\r\nimport { HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\r\nimport Lobby from './components/Lobby';\r\nimport Chat from './components/Chat';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst App = () => {\r\n  const [connection, setConnection] = useState();\r\n  const [messages, setMessages] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n\r\n  const joinRoom = async (user, room) => {\r\n    try {\r\n      const connection = new HubConnectionBuilder()\r\n        .withUrl(\"https://localhost:5001/chat\")\r\n        .configureLogging(LogLevel.Information)\r\n        .build();\r\n\r\n      connection.on(\"ReceiveMessage\", (user, message) => {\r\n        setMessages(messages => [...messages, { user, message }]);\r\n      });\r\n\r\n      connection.on(\"UsersInRoom\", (users) => {\r\n        setUsers(users);\r\n      });\r\n\r\n      connection.onclose(e => {\r\n        setConnection();\r\n        setMessages([]);\r\n        setUsers([]);\r\n      });\r\n\r\n      await connection.start();\r\n      await connection.invoke(\"JoinRoom\", { user, room });\r\n      setConnection(connection);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  const sendMessage = async (message) => {\r\n    try {\r\n      await connection.invoke(\"SendMessage\", message);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  const closeConnection = async () => {\r\n    try {\r\n      await connection.stop();\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  return <div className='app'>\r\n    <h2>SignalR Chat App</h2>\r\n    <hr className='line' />\r\n    {!connection\r\n      ? <Lobby joinRoom={joinRoom} />\r\n      : <Chat sendMessage={sendMessage} messages={messages} users={users} closeConnection={closeConnection} />}\r\n  </div>\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}