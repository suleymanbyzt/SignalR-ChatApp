{"ast":null,"code":"// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\n// 0, 2, 10, 30 second delays before reconnect attempts.\nvar DEFAULT_RETRY_DELAYS_IN_MILLISECONDS = [0, 2000, 10000, 30000, null];\n/** @private */\n\nvar DefaultReconnectPolicy =\n/** @class */\nfunction () {\n  function DefaultReconnectPolicy(retryDelays) {\n    this.retryDelays = retryDelays !== undefined ? retryDelays.concat([null]) : DEFAULT_RETRY_DELAYS_IN_MILLISECONDS;\n  }\n\n  DefaultReconnectPolicy.prototype.nextRetryDelayInMilliseconds = function (retryContext) {\n    return this.retryDelays[retryContext.previousRetryCount];\n  };\n\n  return DefaultReconnectPolicy;\n}();\n\nexport { DefaultReconnectPolicy };","map":{"version":3,"sources":["../../src/DefaultReconnectPolicy.ts"],"names":[],"mappings":"AAAA;AACA;AAIA;AACA,IAAM,oCAAoC,GAAG,CAAC,CAAD,EAAI,IAAJ,EAAU,KAAV,EAAiB,KAAjB,EAAwB,IAAxB,CAA7C;AAEA;;AACA,IAAA,sBAAA;AAAA;AAAA,YAAA;AAGI,WAAA,sBAAA,CAAY,WAAZ,EAAkC;AAC9B,SAAK,WAAL,GAAmB,WAAW,KAAK,SAAhB,GAAgC,WAAW,CAAA,MAAX,CAAW,CAAE,IAAF,CAAX,CAAhC,GAAqD,oCAAxE;AACH;;AAEM,EAAA,sBAAA,CAAA,SAAA,CAAA,4BAAA,GAAP,UAAoC,YAApC,EAA8D;AAC1D,WAAO,KAAK,WAAL,CAAiB,YAAY,CAAC,kBAA9B,CAAP;AACH,GAFM;;AAGX,SAAA,sBAAA;AAAC,CAVD,EAAA","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { IRetryPolicy, RetryContext } from \"./IRetryPolicy\";\r\n\r\n// 0, 2, 10, 30 second delays before reconnect attempts.\r\nconst DEFAULT_RETRY_DELAYS_IN_MILLISECONDS = [0, 2000, 10000, 30000, null];\r\n\r\n/** @private */\r\nexport class DefaultReconnectPolicy implements IRetryPolicy {\r\n    private readonly retryDelays: Array<number | null>;\r\n\r\n    constructor(retryDelays?: number[]) {\r\n        this.retryDelays = retryDelays !== undefined ? [...retryDelays, null] : DEFAULT_RETRY_DELAYS_IN_MILLISECONDS;\r\n    }\r\n\r\n    public nextRetryDelayInMilliseconds(retryContext: RetryContext): number | null {\r\n        return this.retryDelays[retryContext.previousRetryCount];\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}